schema {
  query: Query
  mutation: Mutation
}

"""Below the list of queries available for database."""
type Query {
  """Retrieves current user"""
  me: FiberyUser
  """
  Find ThingsThing records.
  
  By default, offset equals to 0 and limit equals to 100
  
  ```{findThings{id,name}}```
  """
  findThings(
    orderBy: ThingsThingOrder
    limit: Int
    offset: Int
    """fibery/id"""
    id: IDFilter
    """fibery/public-id"""
    publicId: StringFilter
    """fibery/creation-date"""
    creationDate: StringFilter
    """fibery/modification-date"""
    modificationDate: StringFilter
    """fibery/rank"""
    rank: FloatFilter
    """fibery/created-by"""
    createdBy: FiberyUserFilter
    """Things/Brand"""
    brand: StringFilter
    """Things/Name"""
    name: StringFilter
  ): [ThingsThing]
}

"""Available fields and relations for Things/Thing"""
type ThingsThing {
  """fibery/id"""
  id: ID
  """fibery/public-id"""
  publicId: String
  """fibery/creation-date"""
  creationDate: String
  """fibery/modification-date"""
  modificationDate: String
  """fibery/rank"""
  rank: Float
  """fibery/created-by"""
  createdBy: FiberyUser
  """Things/Brand"""
  brand: String
  """Things/Description"""
  description: RichField
  """Things/Name"""
  name: String
}

input ThingsThingInput {
  """fibery/rank"""
  rank: Float
  """Things/Brand"""
  brand: String
  """Things/Name"""
  name: String
}

input ThingsThingOrder {
  """fibery/id"""
  id: Order
  """fibery/public-id"""
  publicId: Order
  """fibery/creation-date"""
  creationDate: Order
  """fibery/modification-date"""
  modificationDate: Order
  """fibery/rank"""
  rank: Order
  """fibery/created-by"""
  createdBy: FiberyUserOrder
  """Things/Brand"""
  brand: Order
  """Things/Name"""
  name: Order
}

"""
Available operations which can be done with found things via provided query or created
"""
type ThingsThingOperations {
  """Create. Create a new Thing and specify field values"""
  create(
    """fibery/rank"""
    rank: Float
    """Things/Brand"""
    brand: String
    """Things/Name"""
    name: String
  ): MutationResult
  """Batch Create. Create a new Thing and specify field values"""
  createBatch(data: [ThingsThingInput]): MutationResult
  """Update. Set new values for fields"""
  update(
    """fibery/rank"""
    rank: Float
    """Things/Brand"""
    brand: String
    """Things/Name"""
    name: String
  ): MutationResult
  """Batch Update. Set new values for fields"""
  updateBatch(data: [ThingsThingInput]): MutationResult
  """Delete. Delete Thing"""
  delete: MutationResult
  """Script. Execute Javascript code"""
  script(
    """Script code"""
    script: String
  ): MutationResult
  """Batch Script. Execute Javascript code"""
  scriptBatch(data: [ScriptInput]): MutationResult
  """
  Append content to Description. Append content to document. Markdown template is supported. For example **{{Name}}**, {{Bugs:Name,Status.Name}}, &lt;%= new Date()%&gt;, &lt;%= Entity.Id%&gt;, &lt;%= Entity.Type%&gt;
  """
  appendContentToDescription(
    """Document"""
    value: String
  ): MutationResult
  """
  Batch Append content to Description. Append content to document. Markdown template is supported. For example **{{Name}}**, {{Bugs:Name,Status.Name}}, &lt;%= new Date()%&gt;, &lt;%= Entity.Id%&gt;, &lt;%= Entity.Type%&gt;
  """
  appendContentToDescriptionBatch(data: [AppendContentToDescriptionInput]): MutationResult
  """
  Prepend content to Description. Prepend content to document. Markdown template is supported. For example **{{Name}}**, {{Bugs:Name,Status.Name}}, &lt;%= new Date()%&gt;, &lt;%= Entity.Id%&gt;, &lt;%= Entity.Type%&gt;
  """
  prependContentToDescription(
    """Document"""
    value: String
  ): MutationResult
  """
  Batch Prepend content to Description. Prepend content to document. Markdown template is supported. For example **{{Name}}**, {{Bugs:Name,Status.Name}}, &lt;%= new Date()%&gt;, &lt;%= Entity.Id%&gt;, &lt;%= Entity.Type%&gt;
  """
  prependContentToDescriptionBatch(data: [PrependContentToDescriptionInput]): MutationResult
  """
  Overwrite Description. Replace document content. Markdown template is supported. For example **{{Name}}**, {{Bugs:Name,Status.Name}}, &lt;%= new Date()%&gt;, &lt;%= Entity.Id%&gt;, &lt;%= Entity.Type%&gt;
  """
  overwriteDescription(
    """Document"""
    value: String
  ): MutationResult
  """
  Batch Overwrite Description. Replace document content. Markdown template is supported. For example **{{Name}}**, {{Bugs:Name,Status.Name}}, &lt;%= new Date()%&gt;, &lt;%= Entity.Id%&gt;, &lt;%= Entity.Type%&gt;
  """
  overwriteDescriptionBatch(data: [OverwriteDescriptionInput]): MutationResult
  """
  Notify Created By. Send in-app notification (slack or email if configured) to Created By. Text templating is supported. For example: Something happened with {{Name}} on &lt;%= new Date()%&gt;
  """
  notifyCreatedBy(
    """Subject"""
    subject: String
    """Message"""
    message: String
    """Notify the author of modifications"""
    notifyAuthor: Boolean
  ): MutationResult
  """
  Batch Notify Created By. Send in-app notification (slack or email if configured) to Created By. Text templating is supported. For example: Something happened with {{Name}} on &lt;%= new Date()%&gt;
  """
  notifyCreatedByBatch(data: [NotifyCreatedByInput]): MutationResult
  """
  Notify Users. Send in-app notification (slack or email if configured) to specified users. Text templating is supported. For example: Something happened with {{Name}} on &lt;%= new Date()%&gt;
  """
  notifyUsers(
    """To"""
    to: [FiberyUserFilter]
    """Subject"""
    subject: String
    """Message"""
    message: String
    """Notify the author of modifications"""
    notifyAuthor: Boolean
    """Don&#39;t notify if there are no entities to be processed"""
    noEmptySend: Boolean
  ): MutationResult
  """
  Batch Notify Users. Send in-app notification (slack or email if configured) to specified users. Text templating is supported. For example: Something happened with {{Name}} on &lt;%= new Date()%&gt;
  """
  notifyUsersBatch(data: [NotifyUsersInput]): MutationResult
  """countOfEntities. Count of found or created things to be modified"""
  countOfEntities: Int
  """listEntities. List of found or created things to be modified"""
  listEntities: [Entity]
}

"""Filter for Things/Thing"""
input ThingsThingFilter {
  orderBy: ThingsThingOrder
  limit: Int
  offset: Int
  """fibery/id"""
  id: IDFilter
  """fibery/public-id"""
  publicId: StringFilter
  """fibery/creation-date"""
  creationDate: StringFilter
  """fibery/modification-date"""
  modificationDate: StringFilter
  """fibery/rank"""
  rank: FloatFilter
  """fibery/created-by"""
  createdBy: FiberyUserFilter
  """Things/Brand"""
  brand: StringFilter
  """Things/Name"""
  name: StringFilter
}

input ThingsThingCollectionFilter {
  isEmpty: Boolean
  contains: [ThingsThingFilter]
  containsAny: [ThingsThingFilter]
  notContains: [ThingsThingFilter]
  notContainsAny: [ThingsThingFilter]
}

"""Available fields and relations for fibery/user"""
type FiberyUser {
  """fibery/active?"""
  active: Boolean
  """fibery/id"""
  id: ID
  """fibery/public-id"""
  publicId: String
  """fibery/creation-date"""
  creationDate: String
  """fibery/modification-date"""
  modificationDate: String
  """fibery/rank"""
  rank: Float
  """user/email"""
  email: String
  """user/name"""
  name: String
}

input FiberyUserInput {
  """fibery/rank"""
  rank: Float
  """user/name"""
  name: String
}

input FiberyUserOrder {
  """fibery/active?"""
  active: Order
  """fibery/id"""
  id: Order
  """fibery/public-id"""
  publicId: Order
  """fibery/creation-date"""
  creationDate: Order
  """fibery/modification-date"""
  modificationDate: Order
  """fibery/rank"""
  rank: Order
  """user/email"""
  email: Order
  """user/name"""
  name: Order
}

"""Filter for fibery/user"""
input FiberyUserFilter {
  orderBy: FiberyUserOrder
  limit: Int
  offset: Int
  """fibery/active?"""
  active: BooleanFilter
  """fibery/id"""
  id: IDFilter
  """fibery/public-id"""
  publicId: StringFilter
  """fibery/creation-date"""
  creationDate: StringFilter
  """fibery/modification-date"""
  modificationDate: StringFilter
  """fibery/rank"""
  rank: FloatFilter
  """user/email"""
  email: StringFilter
  """user/name"""
  name: StringFilter
}

input FiberyUserCollectionFilter {
  isEmpty: Boolean
  contains: [FiberyUserFilter]
  containsAny: [FiberyUserFilter]
  notContains: [FiberyUserFilter]
  notContainsAny: [FiberyUserFilter]
}

input StringFilter {
  is: String
  isNot: String
  contains: String
  notContains: String
  greater: String
  greaterOrEquals: String
  less: String
  lessOrEquals: String
  in: [String]
  notIn: [String]
  isNull: Boolean
}

input FloatFilter {
  is: Float
  isNot: Float
  greater: Float
  greaterOrEquals: Float
  less: Float
  lessOrEquals: Float
  in: [Float]
  notIn: [Float]
  isNull: Boolean
}

input IDFilter {
  is: ID
  isNot: ID
  in: [ID]
  notIn: [ID]
  isNull: Boolean
}

input IntFilter {
  is: Int
  isNot: Int
  greater: Int
  greaterOrEquals: Int
  less: Int
  lessOrEquals: Int
  in: [Int]
  notIn: [Int]
  isNull: Boolean
}

input BooleanFilter {
  is: Boolean
  isNull: Boolean
}

input DateRangeFilter {
  start: StringFilter
  end: StringFilter
  isNull: Boolean
}

type DateRange {
  start: String
  end: String
}

input DateRangeInput {
  start: String
  end: String
}

type RichField {
  secret: String
  md: String
  html: String
  jsonString: String
  text: String
}

type Document {
  id: ID
  secret: String
  name: String
  md: String
  html: String
  jsonString: String
  text: String
}

type Entity {
  id: ID
  type: String
}

type Doc {
  secret: String
}

type MutationResult {
  message: String
  entities: [Entity]
  documents: [Doc]
}

enum Order {
  ASC
  DESC
}

input DateRangeOrder {
  start: Order
  end: Order
}

"""Input for Script"""
input ScriptInput {
  """Script code"""
  script: String
}

"""Input for Append content to Description"""
input AppendContentToDescriptionInput {
  """Document"""
  value: String
}

"""Input for Prepend content to Description"""
input PrependContentToDescriptionInput {
  """Document"""
  value: String
}

"""Input for Overwrite Description"""
input OverwriteDescriptionInput {
  """Document"""
  value: String
}

"""Input for Notify Created By"""
input NotifyCreatedByInput {
  """Subject"""
  subject: String
  """Message"""
  message: String
  """Notify the author of modifications"""
  notifyAuthor: Boolean
}

"""Input for Notify Users"""
input NotifyUsersInput {
  """To"""
  to: [FiberyUserFilter]
  """Subject"""
  subject: String
  """Message"""
  message: String
  """Notify the author of modifications"""
  notifyAuthor: Boolean
  """Don&#39;t notify if there are no entities to be processed"""
  noEmptySend: Boolean
}

"""Use mutations to modify database"""
type Mutation {
  """
  Modify selected entities using multiple actions (update, link and etc.)
  ```
  mutation {
      things(id:{is: "AAAA-BBBB-CCCC"}){
          update(name:"Updated"){message}
      }
  }
  ```
  """
  things(
    orderBy: ThingsThingOrder
    limit: Int
    offset: Int
    """fibery/id"""
    id: IDFilter
    """fibery/public-id"""
    publicId: StringFilter
    """fibery/creation-date"""
    creationDate: StringFilter
    """fibery/modification-date"""
    modificationDate: StringFilter
    """fibery/rank"""
    rank: FloatFilter
    """fibery/created-by"""
    createdBy: FiberyUserFilter
    """Things/Brand"""
    brand: StringFilter
    """Things/Name"""
    name: StringFilter
  ): ThingsThingOperations
}