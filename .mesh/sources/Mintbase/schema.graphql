schema {
  query: query_root
  subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60
  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "blocks"
"""
type blocks {
  synced_height: bigint!
}

"""
aggregated selection of "blocks"
"""
type blocks_aggregate {
  aggregate: blocks_aggregate_fields
  nodes: [blocks!]!
}

"""
aggregate fields of "blocks"
"""
type blocks_aggregate_fields {
  avg: blocks_avg_fields
  count(columns: [blocks_select_column!], distinct: Boolean): Int!
  max: blocks_max_fields
  min: blocks_min_fields
  stddev: blocks_stddev_fields
  stddev_pop: blocks_stddev_pop_fields
  stddev_samp: blocks_stddev_samp_fields
  sum: blocks_sum_fields
  var_pop: blocks_var_pop_fields
  var_samp: blocks_var_samp_fields
  variance: blocks_variance_fields
}

"""aggregate avg on columns"""
type blocks_avg_fields {
  synced_height: Float
}

"""
Boolean expression to filter rows from the table "blocks". All fields are combined with a logical 'AND'.
"""
input blocks_bool_exp {
  _and: [blocks_bool_exp!]
  _not: blocks_bool_exp
  _or: [blocks_bool_exp!]
  synced_height: bigint_comparison_exp
}

"""aggregate max on columns"""
type blocks_max_fields {
  synced_height: bigint
}

"""aggregate min on columns"""
type blocks_min_fields {
  synced_height: bigint
}

"""Ordering options when selecting data from "blocks"."""
input blocks_order_by {
  synced_height: order_by
}

"""
select columns of table "blocks"
"""
enum blocks_select_column {
  """column name"""
  synced_height
}

"""aggregate stddev on columns"""
type blocks_stddev_fields {
  synced_height: Float
}

"""aggregate stddev_pop on columns"""
type blocks_stddev_pop_fields {
  synced_height: Float
}

"""aggregate stddev_samp on columns"""
type blocks_stddev_samp_fields {
  synced_height: Float
}

"""
Streaming cursor of the table "blocks"
"""
input blocks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: blocks_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input blocks_stream_cursor_value_input {
  synced_height: bigint
}

"""aggregate sum on columns"""
type blocks_sum_fields {
  synced_height: bigint
}

"""aggregate var_pop on columns"""
type blocks_var_pop_fields {
  synced_height: Float
}

"""aggregate var_samp on columns"""
type blocks_var_samp_fields {
  synced_height: Float
}

"""aggregate variance on columns"""
type blocks_variance_fields {
  synced_height: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  """is the column contained in the given json value"""
  _contained_in: jsonb
  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  """does the string exist as a top-level key in the column"""
  _has_key: String
  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]
  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "mb_store_minters"
"""
type Minter {
  minter_id: String!
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
}

"""
aggregated selection of "mb_store_minters"
"""
type mb_store_minters_aggregate {
  aggregate: mb_store_minters_aggregate_fields
  nodes: [Minter!]!
}

"""
aggregate fields of "mb_store_minters"
"""
type mb_store_minters_aggregate_fields {
  count(columns: [mb_store_minters_select_column!], distinct: Boolean): Int!
  max: mb_store_minters_max_fields
  min: mb_store_minters_min_fields
}

"""
Boolean expression to filter rows from the table "mb_store_minters". All fields are combined with a logical 'AND'.
"""
input mb_store_minters_bool_exp {
  _and: [mb_store_minters_bool_exp!]
  _not: mb_store_minters_bool_exp
  _or: [mb_store_minters_bool_exp!]
  minter_id: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
}

"""aggregate max on columns"""
type mb_store_minters_max_fields {
  minter_id: String
  nft_contract_id: String
}

"""aggregate min on columns"""
type mb_store_minters_min_fields {
  minter_id: String
  nft_contract_id: String
}

"""Ordering options when selecting data from "mb_store_minters"."""
input mb_store_minters_order_by {
  minter_id: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
}

"""
select columns of table "mb_store_minters"
"""
enum mb_store_minters_select_column {
  """column name"""
  minter_id
  """column name"""
  nft_contract_id
}

"""
Streaming cursor of the table "mb_store_minters"
"""
input mb_store_minters_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_store_minters_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_store_minters_stream_cursor_value_input {
  minter_id: String
  nft_contract_id: String
}

"""
columns and relationships of "mb_views.active_listings"
"""
type Listing {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  """An array relationship"""
  offers(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): [nft_offers!]!
  """An aggregate relationship"""
  offers_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): nft_offers_aggregate!
  price: numeric
  receipt_id: String
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  title: String
  """An object relationship"""
  token: mb_views_nft_tokens
  token_id: String
}

"""
aggregated selection of "mb_views.active_listings"
"""
type mb_views_active_listings_aggregate {
  aggregate: mb_views_active_listings_aggregate_fields
  nodes: [Listing!]!
}

input mb_views_active_listings_aggregate_bool_exp {
  count: mb_views_active_listings_aggregate_bool_exp_count
}

input mb_views_active_listings_aggregate_bool_exp_count {
  arguments: [mb_views_active_listings_select_column!]
  distinct: Boolean
  filter: mb_views_active_listings_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "mb_views.active_listings"
"""
type mb_views_active_listings_aggregate_fields {
  avg: mb_views_active_listings_avg_fields
  count(columns: [mb_views_active_listings_select_column!], distinct: Boolean): Int!
  max: mb_views_active_listings_max_fields
  min: mb_views_active_listings_min_fields
  stddev: mb_views_active_listings_stddev_fields
  stddev_pop: mb_views_active_listings_stddev_pop_fields
  stddev_samp: mb_views_active_listings_stddev_samp_fields
  sum: mb_views_active_listings_sum_fields
  var_pop: mb_views_active_listings_var_pop_fields
  var_samp: mb_views_active_listings_var_samp_fields
  variance: mb_views_active_listings_variance_fields
}

"""
order by aggregate values of table "mb_views.active_listings"
"""
input mb_views_active_listings_aggregate_order_by {
  avg: mb_views_active_listings_avg_order_by
  count: order_by
  max: mb_views_active_listings_max_order_by
  min: mb_views_active_listings_min_order_by
  stddev: mb_views_active_listings_stddev_order_by
  stddev_pop: mb_views_active_listings_stddev_pop_order_by
  stddev_samp: mb_views_active_listings_stddev_samp_order_by
  sum: mb_views_active_listings_sum_order_by
  var_pop: mb_views_active_listings_var_pop_order_by
  var_samp: mb_views_active_listings_var_samp_order_by
  variance: mb_views_active_listings_variance_order_by
}

"""aggregate avg on columns"""
type mb_views_active_listings_avg_fields {
  approval_id: Float
  price: Float
}

"""
order by avg() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_avg_order_by {
  approval_id: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "mb_views.active_listings". All fields are combined with a logical 'AND'.
"""
input mb_views_active_listings_bool_exp {
  _and: [mb_views_active_listings_bool_exp!]
  _not: mb_views_active_listings_bool_exp
  _or: [mb_views_active_listings_bool_exp!]
  approval_id: numeric_comparison_exp
  base_uri: String_comparison_exp
  content_flag: String_comparison_exp
  created_at: timestamp_comparison_exp
  currency: String_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  kind: String_comparison_exp
  listed_by: String_comparison_exp
  market_id: String_comparison_exp
  media: String_comparison_exp
  metadata_id: String_comparison_exp
  minter: String_comparison_exp
  nft_contract_id: String_comparison_exp
  offers: nft_offers_bool_exp
  offers_aggregate: nft_offers_aggregate_bool_exp
  price: numeric_comparison_exp
  receipt_id: String_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  title: String_comparison_exp
  token: mb_views_nft_tokens_bool_exp
  token_id: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_active_listings_max_fields {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  title: String
  token_id: String
}

"""
order by max() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_max_order_by {
  approval_id: order_by
  base_uri: order_by
  content_flag: order_by
  created_at: order_by
  currency: order_by
  description: order_by
  extra: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  media: order_by
  metadata_id: order_by
  minter: order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  reference: order_by
  title: order_by
  token_id: order_by
}

"""aggregate min on columns"""
type mb_views_active_listings_min_fields {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  title: String
  token_id: String
}

"""
order by min() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_min_order_by {
  approval_id: order_by
  base_uri: order_by
  content_flag: order_by
  created_at: order_by
  currency: order_by
  description: order_by
  extra: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  media: order_by
  metadata_id: order_by
  minter: order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  reference: order_by
  title: order_by
  token_id: order_by
}

"""Ordering options when selecting data from "mb_views.active_listings"."""
input mb_views_active_listings_order_by {
  approval_id: order_by
  base_uri: order_by
  content_flag: order_by
  created_at: order_by
  currency: order_by
  description: order_by
  extra: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  media: order_by
  metadata_id: order_by
  minter: order_by
  nft_contract_id: order_by
  offers_aggregate: nft_offers_aggregate_order_by
  price: order_by
  receipt_id: order_by
  reference: order_by
  reference_blob: order_by
  title: order_by
  token: mb_views_nft_tokens_order_by
  token_id: order_by
}

"""
columns and relationships of "mb_views.active_listings_rollup"
"""
type mb_views_active_listings_rollup {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  title: String
  token_id: String
}

"""
aggregated selection of "mb_views.active_listings_rollup"
"""
type mb_views_active_listings_rollup_aggregate {
  aggregate: mb_views_active_listings_rollup_aggregate_fields
  nodes: [mb_views_active_listings_rollup!]!
}

"""
aggregate fields of "mb_views.active_listings_rollup"
"""
type mb_views_active_listings_rollup_aggregate_fields {
  avg: mb_views_active_listings_rollup_avg_fields
  count(columns: [mb_views_active_listings_rollup_select_column!], distinct: Boolean): Int!
  max: mb_views_active_listings_rollup_max_fields
  min: mb_views_active_listings_rollup_min_fields
  stddev: mb_views_active_listings_rollup_stddev_fields
  stddev_pop: mb_views_active_listings_rollup_stddev_pop_fields
  stddev_samp: mb_views_active_listings_rollup_stddev_samp_fields
  sum: mb_views_active_listings_rollup_sum_fields
  var_pop: mb_views_active_listings_rollup_var_pop_fields
  var_samp: mb_views_active_listings_rollup_var_samp_fields
  variance: mb_views_active_listings_rollup_variance_fields
}

"""aggregate avg on columns"""
type mb_views_active_listings_rollup_avg_fields {
  approval_id: Float
  price: Float
}

"""
Boolean expression to filter rows from the table "mb_views.active_listings_rollup". All fields are combined with a logical 'AND'.
"""
input mb_views_active_listings_rollup_bool_exp {
  _and: [mb_views_active_listings_rollup_bool_exp!]
  _not: mb_views_active_listings_rollup_bool_exp
  _or: [mb_views_active_listings_rollup_bool_exp!]
  approval_id: numeric_comparison_exp
  base_uri: String_comparison_exp
  content_flag: String_comparison_exp
  created_at: timestamp_comparison_exp
  currency: String_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  kind: String_comparison_exp
  listed_by: String_comparison_exp
  market_id: String_comparison_exp
  media: String_comparison_exp
  metadata_id: String_comparison_exp
  minter: String_comparison_exp
  nft_contract_id: String_comparison_exp
  price: numeric_comparison_exp
  receipt_id: String_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  title: String_comparison_exp
  token_id: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_active_listings_rollup_max_fields {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  title: String
  token_id: String
}

"""aggregate min on columns"""
type mb_views_active_listings_rollup_min_fields {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  title: String
  token_id: String
}

"""
Ordering options when selecting data from "mb_views.active_listings_rollup".
"""
input mb_views_active_listings_rollup_order_by {
  approval_id: order_by
  base_uri: order_by
  content_flag: order_by
  created_at: order_by
  currency: order_by
  description: order_by
  extra: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  media: order_by
  metadata_id: order_by
  minter: order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  reference: order_by
  reference_blob: order_by
  title: order_by
  token_id: order_by
}

"""
select columns of table "mb_views.active_listings_rollup"
"""
enum mb_views_active_listings_rollup_select_column {
  """column name"""
  approval_id
  """column name"""
  base_uri
  """column name"""
  content_flag
  """column name"""
  created_at
  """column name"""
  currency
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  kind
  """column name"""
  listed_by
  """column name"""
  market_id
  """column name"""
  media
  """column name"""
  metadata_id
  """column name"""
  minter
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  receipt_id
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  title
  """column name"""
  token_id
}

"""aggregate stddev on columns"""
type mb_views_active_listings_rollup_stddev_fields {
  approval_id: Float
  price: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_active_listings_rollup_stddev_pop_fields {
  approval_id: Float
  price: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_active_listings_rollup_stddev_samp_fields {
  approval_id: Float
  price: Float
}

"""
Streaming cursor of the table "mb_views_active_listings_rollup"
"""
input mb_views_active_listings_rollup_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_active_listings_rollup_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_active_listings_rollup_stream_cursor_value_input {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob: jsonb
  title: String
  token_id: String
}

"""aggregate sum on columns"""
type mb_views_active_listings_rollup_sum_fields {
  approval_id: numeric
  price: numeric
}

"""aggregate var_pop on columns"""
type mb_views_active_listings_rollup_var_pop_fields {
  approval_id: Float
  price: Float
}

"""aggregate var_samp on columns"""
type mb_views_active_listings_rollup_var_samp_fields {
  approval_id: Float
  price: Float
}

"""aggregate variance on columns"""
type mb_views_active_listings_rollup_variance_fields {
  approval_id: Float
  price: Float
}

"""
select columns of table "mb_views.active_listings"
"""
enum mb_views_active_listings_select_column {
  """column name"""
  approval_id
  """column name"""
  base_uri
  """column name"""
  content_flag
  """column name"""
  created_at
  """column name"""
  currency
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  kind
  """column name"""
  listed_by
  """column name"""
  market_id
  """column name"""
  media
  """column name"""
  metadata_id
  """column name"""
  minter
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  receipt_id
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  title
  """column name"""
  token_id
}

"""aggregate stddev on columns"""
type mb_views_active_listings_stddev_fields {
  approval_id: Float
  price: Float
}

"""
order by stddev() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_stddev_order_by {
  approval_id: order_by
  price: order_by
}

"""aggregate stddev_pop on columns"""
type mb_views_active_listings_stddev_pop_fields {
  approval_id: Float
  price: Float
}

"""
order by stddev_pop() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_stddev_pop_order_by {
  approval_id: order_by
  price: order_by
}

"""aggregate stddev_samp on columns"""
type mb_views_active_listings_stddev_samp_fields {
  approval_id: Float
  price: Float
}

"""
order by stddev_samp() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_stddev_samp_order_by {
  approval_id: order_by
  price: order_by
}

"""
Streaming cursor of the table "mb_views_active_listings"
"""
input mb_views_active_listings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_active_listings_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_active_listings_stream_cursor_value_input {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob: jsonb
  title: String
  token_id: String
}

"""aggregate sum on columns"""
type mb_views_active_listings_sum_fields {
  approval_id: numeric
  price: numeric
}

"""
order by sum() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_sum_order_by {
  approval_id: order_by
  price: order_by
}

"""aggregate var_pop on columns"""
type mb_views_active_listings_var_pop_fields {
  approval_id: Float
  price: Float
}

"""
order by var_pop() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_var_pop_order_by {
  approval_id: order_by
  price: order_by
}

"""aggregate var_samp on columns"""
type mb_views_active_listings_var_samp_fields {
  approval_id: Float
  price: Float
}

"""
order by var_samp() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_var_samp_order_by {
  approval_id: order_by
  price: order_by
}

"""aggregate variance on columns"""
type mb_views_active_listings_variance_fields {
  approval_id: Float
  price: Float
}

"""
order by variance() on columns of table "mb_views.active_listings"
"""
input mb_views_active_listings_variance_order_by {
  approval_id: order_by
  price: order_by
}

"""
columns and relationships of "mb_views.auctions_with_offer"
"""
type mb_views_auctions_with_offer {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  listing_accepted_at: timestamp
  listing_invalidated_at: timestamp
  listing_receipt_id: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  """An object relationship"""
  nft_token: mb_views_nft_tokens
  offer_accepted_at: timestamp
  offer_expires_at: timestamp
  offer_id: bigint
  offer_price: numeric
  offer_receipt_id: String
  offer_withdrawn_at: timestamp
  offered_at: timestamp
  offered_by: String
  price: numeric
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  title: String
  token_id: String
  unlisted_at: timestamp
}

"""
aggregated selection of "mb_views.auctions_with_offer"
"""
type mb_views_auctions_with_offer_aggregate {
  aggregate: mb_views_auctions_with_offer_aggregate_fields
  nodes: [mb_views_auctions_with_offer!]!
}

"""
aggregate fields of "mb_views.auctions_with_offer"
"""
type mb_views_auctions_with_offer_aggregate_fields {
  avg: mb_views_auctions_with_offer_avg_fields
  count(columns: [mb_views_auctions_with_offer_select_column!], distinct: Boolean): Int!
  max: mb_views_auctions_with_offer_max_fields
  min: mb_views_auctions_with_offer_min_fields
  stddev: mb_views_auctions_with_offer_stddev_fields
  stddev_pop: mb_views_auctions_with_offer_stddev_pop_fields
  stddev_samp: mb_views_auctions_with_offer_stddev_samp_fields
  sum: mb_views_auctions_with_offer_sum_fields
  var_pop: mb_views_auctions_with_offer_var_pop_fields
  var_samp: mb_views_auctions_with_offer_var_samp_fields
  variance: mb_views_auctions_with_offer_variance_fields
}

"""aggregate avg on columns"""
type mb_views_auctions_with_offer_avg_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""
Boolean expression to filter rows from the table "mb_views.auctions_with_offer". All fields are combined with a logical 'AND'.
"""
input mb_views_auctions_with_offer_bool_exp {
  _and: [mb_views_auctions_with_offer_bool_exp!]
  _not: mb_views_auctions_with_offer_bool_exp
  _or: [mb_views_auctions_with_offer_bool_exp!]
  approval_id: numeric_comparison_exp
  base_uri: String_comparison_exp
  content_flag: String_comparison_exp
  created_at: timestamp_comparison_exp
  currency: String_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  kind: String_comparison_exp
  listed_by: String_comparison_exp
  listing_accepted_at: timestamp_comparison_exp
  listing_invalidated_at: timestamp_comparison_exp
  listing_receipt_id: String_comparison_exp
  market_id: String_comparison_exp
  media: String_comparison_exp
  metadata_id: String_comparison_exp
  minter: String_comparison_exp
  nft_contract_id: String_comparison_exp
  nft_token: mb_views_nft_tokens_bool_exp
  offer_accepted_at: timestamp_comparison_exp
  offer_expires_at: timestamp_comparison_exp
  offer_id: bigint_comparison_exp
  offer_price: numeric_comparison_exp
  offer_receipt_id: String_comparison_exp
  offer_withdrawn_at: timestamp_comparison_exp
  offered_at: timestamp_comparison_exp
  offered_by: String_comparison_exp
  price: numeric_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  title: String_comparison_exp
  token_id: String_comparison_exp
  unlisted_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type mb_views_auctions_with_offer_max_fields {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  listing_accepted_at: timestamp
  listing_invalidated_at: timestamp
  listing_receipt_id: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  offer_accepted_at: timestamp
  offer_expires_at: timestamp
  offer_id: bigint
  offer_price: numeric
  offer_receipt_id: String
  offer_withdrawn_at: timestamp
  offered_at: timestamp
  offered_by: String
  price: numeric
  reference: String
  title: String
  token_id: String
  unlisted_at: timestamp
}

"""aggregate min on columns"""
type mb_views_auctions_with_offer_min_fields {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  listing_accepted_at: timestamp
  listing_invalidated_at: timestamp
  listing_receipt_id: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  offer_accepted_at: timestamp
  offer_expires_at: timestamp
  offer_id: bigint
  offer_price: numeric
  offer_receipt_id: String
  offer_withdrawn_at: timestamp
  offered_at: timestamp
  offered_by: String
  price: numeric
  reference: String
  title: String
  token_id: String
  unlisted_at: timestamp
}

"""
Ordering options when selecting data from "mb_views.auctions_with_offer".
"""
input mb_views_auctions_with_offer_order_by {
  approval_id: order_by
  base_uri: order_by
  content_flag: order_by
  created_at: order_by
  currency: order_by
  description: order_by
  extra: order_by
  kind: order_by
  listed_by: order_by
  listing_accepted_at: order_by
  listing_invalidated_at: order_by
  listing_receipt_id: order_by
  market_id: order_by
  media: order_by
  metadata_id: order_by
  minter: order_by
  nft_contract_id: order_by
  nft_token: mb_views_nft_tokens_order_by
  offer_accepted_at: order_by
  offer_expires_at: order_by
  offer_id: order_by
  offer_price: order_by
  offer_receipt_id: order_by
  offer_withdrawn_at: order_by
  offered_at: order_by
  offered_by: order_by
  price: order_by
  reference: order_by
  reference_blob: order_by
  title: order_by
  token_id: order_by
  unlisted_at: order_by
}

"""
select columns of table "mb_views.auctions_with_offer"
"""
enum mb_views_auctions_with_offer_select_column {
  """column name"""
  approval_id
  """column name"""
  base_uri
  """column name"""
  content_flag
  """column name"""
  created_at
  """column name"""
  currency
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  kind
  """column name"""
  listed_by
  """column name"""
  listing_accepted_at
  """column name"""
  listing_invalidated_at
  """column name"""
  listing_receipt_id
  """column name"""
  market_id
  """column name"""
  media
  """column name"""
  metadata_id
  """column name"""
  minter
  """column name"""
  nft_contract_id
  """column name"""
  offer_accepted_at
  """column name"""
  offer_expires_at
  """column name"""
  offer_id
  """column name"""
  offer_price
  """column name"""
  offer_receipt_id
  """column name"""
  offer_withdrawn_at
  """column name"""
  offered_at
  """column name"""
  offered_by
  """column name"""
  price
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  title
  """column name"""
  token_id
  """column name"""
  unlisted_at
}

"""aggregate stddev on columns"""
type mb_views_auctions_with_offer_stddev_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_auctions_with_offer_stddev_pop_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_auctions_with_offer_stddev_samp_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""
Streaming cursor of the table "mb_views_auctions_with_offer"
"""
input mb_views_auctions_with_offer_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_auctions_with_offer_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_auctions_with_offer_stream_cursor_value_input {
  approval_id: numeric
  base_uri: String
  content_flag: String
  created_at: timestamp
  currency: String
  description: String
  extra: String
  kind: String
  listed_by: String
  listing_accepted_at: timestamp
  listing_invalidated_at: timestamp
  listing_receipt_id: String
  market_id: String
  media: String
  metadata_id: String
  minter: String
  nft_contract_id: String
  offer_accepted_at: timestamp
  offer_expires_at: timestamp
  offer_id: bigint
  offer_price: numeric
  offer_receipt_id: String
  offer_withdrawn_at: timestamp
  offered_at: timestamp
  offered_by: String
  price: numeric
  reference: String
  reference_blob: jsonb
  title: String
  token_id: String
  unlisted_at: timestamp
}

"""aggregate sum on columns"""
type mb_views_auctions_with_offer_sum_fields {
  approval_id: numeric
  offer_id: bigint
  offer_price: numeric
  price: numeric
}

"""aggregate var_pop on columns"""
type mb_views_auctions_with_offer_var_pop_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""aggregate var_samp on columns"""
type mb_views_auctions_with_offer_var_samp_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""aggregate variance on columns"""
type mb_views_auctions_with_offer_variance_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  price: Float
}

"""
columns and relationships of "mb_views.nft_activities"
"""
type mb_views_nft_activities {
  action_receiver: String
  action_sender: String
  content_flag: String
  copies: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  reference_hash: String
  timestamp: timestamp
  title: String
  token_id: String
  tx_sender: String
}

"""
aggregated selection of "mb_views.nft_activities"
"""
type mb_views_nft_activities_aggregate {
  aggregate: mb_views_nft_activities_aggregate_fields
  nodes: [mb_views_nft_activities!]!
}

"""
aggregate fields of "mb_views.nft_activities"
"""
type mb_views_nft_activities_aggregate_fields {
  avg: mb_views_nft_activities_avg_fields
  count(columns: [mb_views_nft_activities_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_activities_max_fields
  min: mb_views_nft_activities_min_fields
  stddev: mb_views_nft_activities_stddev_fields
  stddev_pop: mb_views_nft_activities_stddev_pop_fields
  stddev_samp: mb_views_nft_activities_stddev_samp_fields
  sum: mb_views_nft_activities_sum_fields
  var_pop: mb_views_nft_activities_var_pop_fields
  var_samp: mb_views_nft_activities_var_samp_fields
  variance: mb_views_nft_activities_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_activities_avg_fields {
  copies: Float
  price: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_activities". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_activities_bool_exp {
  _and: [mb_views_nft_activities_bool_exp!]
  _not: mb_views_nft_activities_bool_exp
  _or: [mb_views_nft_activities_bool_exp!]
  action_receiver: String_comparison_exp
  action_sender: String_comparison_exp
  content_flag: String_comparison_exp
  copies: bigint_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  kind: String_comparison_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  metadata_id: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  price: numeric_comparison_exp
  receipt_id: String_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  reference_hash: String_comparison_exp
  timestamp: timestamp_comparison_exp
  title: String_comparison_exp
  token_id: String_comparison_exp
  tx_sender: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_activities_max_fields {
  action_receiver: String
  action_sender: String
  content_flag: String
  copies: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_hash: String
  timestamp: timestamp
  title: String
  token_id: String
  tx_sender: String
}

"""aggregate min on columns"""
type mb_views_nft_activities_min_fields {
  action_receiver: String
  action_sender: String
  content_flag: String
  copies: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_hash: String
  timestamp: timestamp
  title: String
  token_id: String
  tx_sender: String
}

"""Ordering options when selecting data from "mb_views.nft_activities"."""
input mb_views_nft_activities_order_by {
  action_receiver: order_by
  action_sender: order_by
  content_flag: order_by
  copies: order_by
  description: order_by
  extra: order_by
  kind: order_by
  media: order_by
  media_hash: order_by
  metadata_id: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  reference: order_by
  reference_blob: order_by
  reference_hash: order_by
  timestamp: order_by
  title: order_by
  token_id: order_by
  tx_sender: order_by
}

"""
columns and relationships of "mb_views.nft_activities_rollup"
"""
type mb_views_nft_activities_rollup {
  action_receiver: String
  action_sender: String
  content_flag: String
  count: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  timestamp: timestamp
  title: String
  token_ids: _text
  tx_sender: String
}

"""
aggregated selection of "mb_views.nft_activities_rollup"
"""
type mb_views_nft_activities_rollup_aggregate {
  aggregate: mb_views_nft_activities_rollup_aggregate_fields
  nodes: [mb_views_nft_activities_rollup!]!
}

"""
aggregate fields of "mb_views.nft_activities_rollup"
"""
type mb_views_nft_activities_rollup_aggregate_fields {
  avg: mb_views_nft_activities_rollup_avg_fields
  count(columns: [mb_views_nft_activities_rollup_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_activities_rollup_max_fields
  min: mb_views_nft_activities_rollup_min_fields
  stddev: mb_views_nft_activities_rollup_stddev_fields
  stddev_pop: mb_views_nft_activities_rollup_stddev_pop_fields
  stddev_samp: mb_views_nft_activities_rollup_stddev_samp_fields
  sum: mb_views_nft_activities_rollup_sum_fields
  var_pop: mb_views_nft_activities_rollup_var_pop_fields
  var_samp: mb_views_nft_activities_rollup_var_samp_fields
  variance: mb_views_nft_activities_rollup_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_activities_rollup_avg_fields {
  count: Float
  price: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_activities_rollup". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_activities_rollup_bool_exp {
  _and: [mb_views_nft_activities_rollup_bool_exp!]
  _not: mb_views_nft_activities_rollup_bool_exp
  _or: [mb_views_nft_activities_rollup_bool_exp!]
  action_receiver: String_comparison_exp
  action_sender: String_comparison_exp
  content_flag: String_comparison_exp
  count: bigint_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  kind: String_comparison_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  metadata_id: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  price: numeric_comparison_exp
  receipt_id: String_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  timestamp: timestamp_comparison_exp
  title: String_comparison_exp
  token_ids: _text_comparison_exp
  tx_sender: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_activities_rollup_max_fields {
  action_receiver: String
  action_sender: String
  content_flag: String
  count: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  timestamp: timestamp
  title: String
  tx_sender: String
}

"""aggregate min on columns"""
type mb_views_nft_activities_rollup_min_fields {
  action_receiver: String
  action_sender: String
  content_flag: String
  count: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  timestamp: timestamp
  title: String
  tx_sender: String
}

"""
Ordering options when selecting data from "mb_views.nft_activities_rollup".
"""
input mb_views_nft_activities_rollup_order_by {
  action_receiver: order_by
  action_sender: order_by
  content_flag: order_by
  count: order_by
  description: order_by
  extra: order_by
  kind: order_by
  media: order_by
  media_hash: order_by
  metadata_id: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  reference: order_by
  reference_blob: order_by
  timestamp: order_by
  title: order_by
  token_ids: order_by
  tx_sender: order_by
}

"""
select columns of table "mb_views.nft_activities_rollup"
"""
enum mb_views_nft_activities_rollup_select_column {
  """column name"""
  action_receiver
  """column name"""
  action_sender
  """column name"""
  content_flag
  """column name"""
  count
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  kind
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  metadata_id
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  receipt_id
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  timestamp
  """column name"""
  title
  """column name"""
  token_ids
  """column name"""
  tx_sender
}

"""aggregate stddev on columns"""
type mb_views_nft_activities_rollup_stddev_fields {
  count: Float
  price: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_activities_rollup_stddev_pop_fields {
  count: Float
  price: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_activities_rollup_stddev_samp_fields {
  count: Float
  price: Float
}

"""
Streaming cursor of the table "mb_views_nft_activities_rollup"
"""
input mb_views_nft_activities_rollup_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_activities_rollup_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_activities_rollup_stream_cursor_value_input {
  action_receiver: String
  action_sender: String
  content_flag: String
  count: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob: jsonb
  timestamp: timestamp
  title: String
  token_ids: _text
  tx_sender: String
}

"""aggregate sum on columns"""
type mb_views_nft_activities_rollup_sum_fields {
  count: bigint
  price: numeric
}

"""aggregate var_pop on columns"""
type mb_views_nft_activities_rollup_var_pop_fields {
  count: Float
  price: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_activities_rollup_var_samp_fields {
  count: Float
  price: Float
}

"""aggregate variance on columns"""
type mb_views_nft_activities_rollup_variance_fields {
  count: Float
  price: Float
}

"""
select columns of table "mb_views.nft_activities"
"""
enum mb_views_nft_activities_select_column {
  """column name"""
  action_receiver
  """column name"""
  action_sender
  """column name"""
  content_flag
  """column name"""
  copies
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  kind
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  metadata_id
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  receipt_id
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  reference_hash
  """column name"""
  timestamp
  """column name"""
  title
  """column name"""
  token_id
  """column name"""
  tx_sender
}

"""aggregate stddev on columns"""
type mb_views_nft_activities_stddev_fields {
  copies: Float
  price: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_activities_stddev_pop_fields {
  copies: Float
  price: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_activities_stddev_samp_fields {
  copies: Float
  price: Float
}

"""
Streaming cursor of the table "mb_views_nft_activities"
"""
input mb_views_nft_activities_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_activities_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_activities_stream_cursor_value_input {
  action_receiver: String
  action_sender: String
  content_flag: String
  copies: bigint
  description: String
  extra: String
  kind: String
  media: String
  media_hash: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  reference: String
  reference_blob: jsonb
  reference_hash: String
  timestamp: timestamp
  title: String
  token_id: String
  tx_sender: String
}

"""aggregate sum on columns"""
type mb_views_nft_activities_sum_fields {
  copies: bigint
  price: numeric
}

"""aggregate var_pop on columns"""
type mb_views_nft_activities_var_pop_fields {
  copies: Float
  price: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_activities_var_samp_fields {
  copies: Float
  price: Float
}

"""aggregate variance on columns"""
type mb_views_nft_activities_variance_fields {
  copies: Float
  price: Float
}

"""
columns and relationships of "mb_views.nft_metadata"
"""
type mb_views_nft_metadata {
  base_uri: String
  description: String
  extra: String
  id: String
  """An array relationship"""
  listings(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): [Listing!]!
  """An aggregate relationship"""
  listings_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): mb_views_active_listings_aggregate!
  media: String
  media_hash: String
  metadata_content_flag: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  title: String
}

"""
aggregated selection of "mb_views.nft_metadata"
"""
type mb_views_nft_metadata_aggregate {
  aggregate: mb_views_nft_metadata_aggregate_fields
  nodes: [mb_views_nft_metadata!]!
}

"""
aggregate fields of "mb_views.nft_metadata"
"""
type mb_views_nft_metadata_aggregate_fields {
  count(columns: [mb_views_nft_metadata_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_metadata_max_fields
  min: mb_views_nft_metadata_min_fields
}

"""
Boolean expression to filter rows from the table "mb_views.nft_metadata". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_metadata_bool_exp {
  _and: [mb_views_nft_metadata_bool_exp!]
  _not: mb_views_nft_metadata_bool_exp
  _or: [mb_views_nft_metadata_bool_exp!]
  base_uri: String_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  id: String_comparison_exp
  listings: mb_views_active_listings_bool_exp
  listings_aggregate: mb_views_active_listings_aggregate_bool_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  metadata_content_flag: String_comparison_exp
  nft_contract_content_flag: String_comparison_exp
  nft_contract_created_at: timestamp_comparison_exp
  nft_contract_icon: String_comparison_exp
  nft_contract_id: String_comparison_exp
  nft_contract_is_mintbase: Boolean_comparison_exp
  nft_contract_name: String_comparison_exp
  nft_contract_owner_id: String_comparison_exp
  nft_contract_reference: String_comparison_exp
  nft_contract_spec: String_comparison_exp
  nft_contract_symbol: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  title: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_metadata_max_fields {
  base_uri: String
  description: String
  extra: String
  id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  title: String
}

"""aggregate min on columns"""
type mb_views_nft_metadata_min_fields {
  base_uri: String
  description: String
  extra: String
  id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  title: String
}

"""Ordering options when selecting data from "mb_views.nft_metadata"."""
input mb_views_nft_metadata_order_by {
  base_uri: order_by
  description: order_by
  extra: order_by
  id: order_by
  listings_aggregate: mb_views_active_listings_aggregate_order_by
  media: order_by
  media_hash: order_by
  metadata_content_flag: order_by
  nft_contract_content_flag: order_by
  nft_contract_created_at: order_by
  nft_contract_icon: order_by
  nft_contract_id: order_by
  nft_contract_is_mintbase: order_by
  nft_contract_name: order_by
  nft_contract_owner_id: order_by
  nft_contract_reference: order_by
  nft_contract_spec: order_by
  nft_contract_symbol: order_by
  reference_blob: order_by
  title: order_by
}

"""
select columns of table "mb_views.nft_metadata"
"""
enum mb_views_nft_metadata_select_column {
  """column name"""
  base_uri
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  id
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  metadata_content_flag
  """column name"""
  nft_contract_content_flag
  """column name"""
  nft_contract_created_at
  """column name"""
  nft_contract_icon
  """column name"""
  nft_contract_id
  """column name"""
  nft_contract_is_mintbase
  """column name"""
  nft_contract_name
  """column name"""
  nft_contract_owner_id
  """column name"""
  nft_contract_reference
  """column name"""
  nft_contract_spec
  """column name"""
  nft_contract_symbol
  """column name"""
  reference_blob
  """column name"""
  title
}

"""
Streaming cursor of the table "mb_views_nft_metadata"
"""
input mb_views_nft_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_metadata_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_metadata_stream_cursor_value_input {
  base_uri: String
  description: String
  extra: String
  id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  reference_blob: jsonb
  title: String
}

"""
columns and relationships of "mb_views.nft_metadata_unburned"
"""
type mb_views_nft_metadata_unburned {
  base_uri: String
  content_flag: String
  description: String
  media: String
  metadata_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  price: numeric
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  title: String
}

"""
aggregated selection of "mb_views.nft_metadata_unburned"
"""
type mb_views_nft_metadata_unburned_aggregate {
  aggregate: mb_views_nft_metadata_unburned_aggregate_fields
  nodes: [mb_views_nft_metadata_unburned!]!
}

"""
aggregate fields of "mb_views.nft_metadata_unburned"
"""
type mb_views_nft_metadata_unburned_aggregate_fields {
  avg: mb_views_nft_metadata_unburned_avg_fields
  count(columns: [mb_views_nft_metadata_unburned_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_metadata_unburned_max_fields
  min: mb_views_nft_metadata_unburned_min_fields
  stddev: mb_views_nft_metadata_unburned_stddev_fields
  stddev_pop: mb_views_nft_metadata_unburned_stddev_pop_fields
  stddev_samp: mb_views_nft_metadata_unburned_stddev_samp_fields
  sum: mb_views_nft_metadata_unburned_sum_fields
  var_pop: mb_views_nft_metadata_unburned_var_pop_fields
  var_samp: mb_views_nft_metadata_unburned_var_samp_fields
  variance: mb_views_nft_metadata_unburned_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_metadata_unburned_avg_fields {
  price: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_metadata_unburned". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_metadata_unburned_bool_exp {
  _and: [mb_views_nft_metadata_unburned_bool_exp!]
  _not: mb_views_nft_metadata_unburned_bool_exp
  _or: [mb_views_nft_metadata_unburned_bool_exp!]
  base_uri: String_comparison_exp
  content_flag: String_comparison_exp
  description: String_comparison_exp
  media: String_comparison_exp
  metadata_id: String_comparison_exp
  minted_timestamp: timestamp_comparison_exp
  minter: String_comparison_exp
  nft_contract_id: String_comparison_exp
  price: numeric_comparison_exp
  reference_blob: jsonb_comparison_exp
  title: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_metadata_unburned_max_fields {
  base_uri: String
  content_flag: String
  description: String
  media: String
  metadata_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  price: numeric
  title: String
}

"""aggregate min on columns"""
type mb_views_nft_metadata_unburned_min_fields {
  base_uri: String
  content_flag: String
  description: String
  media: String
  metadata_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  price: numeric
  title: String
}

"""
Ordering options when selecting data from "mb_views.nft_metadata_unburned".
"""
input mb_views_nft_metadata_unburned_order_by {
  base_uri: order_by
  content_flag: order_by
  description: order_by
  media: order_by
  metadata_id: order_by
  minted_timestamp: order_by
  minter: order_by
  nft_contract_id: order_by
  price: order_by
  reference_blob: order_by
  title: order_by
}

"""
select columns of table "mb_views.nft_metadata_unburned"
"""
enum mb_views_nft_metadata_unburned_select_column {
  """column name"""
  base_uri
  """column name"""
  content_flag
  """column name"""
  description
  """column name"""
  media
  """column name"""
  metadata_id
  """column name"""
  minted_timestamp
  """column name"""
  minter
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  reference_blob
  """column name"""
  title
}

"""aggregate stddev on columns"""
type mb_views_nft_metadata_unburned_stddev_fields {
  price: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_metadata_unburned_stddev_pop_fields {
  price: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_metadata_unburned_stddev_samp_fields {
  price: Float
}

"""
Streaming cursor of the table "mb_views_nft_metadata_unburned"
"""
input mb_views_nft_metadata_unburned_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_metadata_unburned_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_metadata_unburned_stream_cursor_value_input {
  base_uri: String
  content_flag: String
  description: String
  media: String
  metadata_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  price: numeric
  reference_blob: jsonb
  title: String
}

"""aggregate sum on columns"""
type mb_views_nft_metadata_unburned_sum_fields {
  price: numeric
}

"""aggregate var_pop on columns"""
type mb_views_nft_metadata_unburned_var_pop_fields {
  price: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_metadata_unburned_var_samp_fields {
  price: Float
}

"""aggregate variance on columns"""
type mb_views_nft_metadata_unburned_variance_fields {
  price: Float
}

"""
columns and relationships of "mb_views.nft_owned_tokens"
"""
type mb_views_nft_owned_tokens {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  currency: String
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  listing_approval_id: numeric
  listing_kind: String
  """An array relationship"""
  listings(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """An aggregate relationship"""
  listings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): nft_listings_aggregate!
  market_id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  price: numeric
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  reference_hash: String
  royalties(
    """JSON select path"""
    path: String
  ): jsonb
  royalties_percent: Int
  splits(
    """JSON select path"""
    path: String
  ): jsonb
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""
aggregated selection of "mb_views.nft_owned_tokens"
"""
type mb_views_nft_owned_tokens_aggregate {
  aggregate: mb_views_nft_owned_tokens_aggregate_fields
  nodes: [mb_views_nft_owned_tokens!]!
}

"""
aggregate fields of "mb_views.nft_owned_tokens"
"""
type mb_views_nft_owned_tokens_aggregate_fields {
  avg: mb_views_nft_owned_tokens_avg_fields
  count(columns: [mb_views_nft_owned_tokens_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_owned_tokens_max_fields
  min: mb_views_nft_owned_tokens_min_fields
  stddev: mb_views_nft_owned_tokens_stddev_fields
  stddev_pop: mb_views_nft_owned_tokens_stddev_pop_fields
  stddev_samp: mb_views_nft_owned_tokens_stddev_samp_fields
  sum: mb_views_nft_owned_tokens_sum_fields
  var_pop: mb_views_nft_owned_tokens_var_pop_fields
  var_samp: mb_views_nft_owned_tokens_var_samp_fields
  variance: mb_views_nft_owned_tokens_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_owned_tokens_avg_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_owned_tokens". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_owned_tokens_bool_exp {
  _and: [mb_views_nft_owned_tokens_bool_exp!]
  _not: mb_views_nft_owned_tokens_bool_exp
  _or: [mb_views_nft_owned_tokens_bool_exp!]
  base_uri: String_comparison_exp
  burned_receipt_id: String_comparison_exp
  burned_timestamp: timestamp_comparison_exp
  copies: bigint_comparison_exp
  currency: String_comparison_exp
  description: String_comparison_exp
  expires_at: timestamp_comparison_exp
  extra: String_comparison_exp
  issued_at: timestamp_comparison_exp
  last_transfer_receipt_id: String_comparison_exp
  last_transfer_timestamp: timestamp_comparison_exp
  listing_approval_id: numeric_comparison_exp
  listing_kind: String_comparison_exp
  listings: nft_listings_bool_exp
  listings_aggregate: nft_listings_aggregate_bool_exp
  market_id: String_comparison_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  metadata_content_flag: String_comparison_exp
  metadata_id: String_comparison_exp
  mint_memo: String_comparison_exp
  minted_receipt_id: String_comparison_exp
  minted_timestamp: timestamp_comparison_exp
  minter: String_comparison_exp
  nft_contract_created_at: timestamp_comparison_exp
  nft_contract_icon: String_comparison_exp
  nft_contract_id: String_comparison_exp
  nft_contract_is_mintbase: Boolean_comparison_exp
  nft_contract_name: String_comparison_exp
  nft_contract_owner_id: String_comparison_exp
  nft_contract_reference: String_comparison_exp
  nft_contract_spec: String_comparison_exp
  nft_contract_symbol: String_comparison_exp
  owner: String_comparison_exp
  price: numeric_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  reference_hash: String_comparison_exp
  royalties: jsonb_comparison_exp
  royalties_percent: Int_comparison_exp
  splits: jsonb_comparison_exp
  starts_at: timestamp_comparison_exp
  title: String_comparison_exp
  token_id: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_owned_tokens_max_fields {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  currency: String
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  listing_approval_id: numeric
  listing_kind: String
  market_id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  price: numeric
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type mb_views_nft_owned_tokens_min_fields {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  currency: String
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  listing_approval_id: numeric
  listing_kind: String
  market_id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  price: numeric
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""Ordering options when selecting data from "mb_views.nft_owned_tokens"."""
input mb_views_nft_owned_tokens_order_by {
  base_uri: order_by
  burned_receipt_id: order_by
  burned_timestamp: order_by
  copies: order_by
  currency: order_by
  description: order_by
  expires_at: order_by
  extra: order_by
  issued_at: order_by
  last_transfer_receipt_id: order_by
  last_transfer_timestamp: order_by
  listing_approval_id: order_by
  listing_kind: order_by
  listings_aggregate: nft_listings_aggregate_order_by
  market_id: order_by
  media: order_by
  media_hash: order_by
  metadata_content_flag: order_by
  metadata_id: order_by
  mint_memo: order_by
  minted_receipt_id: order_by
  minted_timestamp: order_by
  minter: order_by
  nft_contract_created_at: order_by
  nft_contract_icon: order_by
  nft_contract_id: order_by
  nft_contract_is_mintbase: order_by
  nft_contract_name: order_by
  nft_contract_owner_id: order_by
  nft_contract_reference: order_by
  nft_contract_spec: order_by
  nft_contract_symbol: order_by
  owner: order_by
  price: order_by
  reference: order_by
  reference_blob: order_by
  reference_hash: order_by
  royalties: order_by
  royalties_percent: order_by
  splits: order_by
  starts_at: order_by
  title: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "mb_views.nft_owned_tokens"
"""
enum mb_views_nft_owned_tokens_select_column {
  """column name"""
  base_uri
  """column name"""
  burned_receipt_id
  """column name"""
  burned_timestamp
  """column name"""
  copies
  """column name"""
  currency
  """column name"""
  description
  """column name"""
  expires_at
  """column name"""
  extra
  """column name"""
  issued_at
  """column name"""
  last_transfer_receipt_id
  """column name"""
  last_transfer_timestamp
  """column name"""
  listing_approval_id
  """column name"""
  listing_kind
  """column name"""
  market_id
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  metadata_content_flag
  """column name"""
  metadata_id
  """column name"""
  mint_memo
  """column name"""
  minted_receipt_id
  """column name"""
  minted_timestamp
  """column name"""
  minter
  """column name"""
  nft_contract_created_at
  """column name"""
  nft_contract_icon
  """column name"""
  nft_contract_id
  """column name"""
  nft_contract_is_mintbase
  """column name"""
  nft_contract_name
  """column name"""
  nft_contract_owner_id
  """column name"""
  nft_contract_reference
  """column name"""
  nft_contract_spec
  """column name"""
  nft_contract_symbol
  """column name"""
  owner
  """column name"""
  price
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  reference_hash
  """column name"""
  royalties
  """column name"""
  royalties_percent
  """column name"""
  splits
  """column name"""
  starts_at
  """column name"""
  title
  """column name"""
  token_id
  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type mb_views_nft_owned_tokens_stddev_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_owned_tokens_stddev_pop_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_owned_tokens_stddev_samp_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""
Streaming cursor of the table "mb_views_nft_owned_tokens"
"""
input mb_views_nft_owned_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_owned_tokens_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_owned_tokens_stream_cursor_value_input {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  currency: String
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  listing_approval_id: numeric
  listing_kind: String
  market_id: String
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  price: numeric
  reference: String
  reference_blob: jsonb
  reference_hash: String
  royalties: jsonb
  royalties_percent: Int
  splits: jsonb
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type mb_views_nft_owned_tokens_sum_fields {
  copies: bigint
  listing_approval_id: numeric
  price: numeric
  royalties_percent: Int
}

"""aggregate var_pop on columns"""
type mb_views_nft_owned_tokens_var_pop_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_owned_tokens_var_samp_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""aggregate variance on columns"""
type mb_views_nft_owned_tokens_variance_fields {
  copies: Float
  listing_approval_id: Float
  price: Float
  royalties_percent: Float
}

"""
columns and relationships of "mb_views.nft_tokens"
"""
type mb_views_nft_tokens {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  """An array relationship"""
  listings(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """An aggregate relationship"""
  listings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): nft_listings_aggregate!
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  reference_hash: String
  royalties(
    """JSON select path"""
    path: String
  ): jsonb
  royalties_percent: Int
  splits(
    """JSON select path"""
    path: String
  ): jsonb
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""
aggregated selection of "mb_views.nft_tokens"
"""
type mb_views_nft_tokens_aggregate {
  aggregate: mb_views_nft_tokens_aggregate_fields
  nodes: [mb_views_nft_tokens!]!
}

"""
aggregate fields of "mb_views.nft_tokens"
"""
type mb_views_nft_tokens_aggregate_fields {
  avg: mb_views_nft_tokens_avg_fields
  count(columns: [mb_views_nft_tokens_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_tokens_max_fields
  min: mb_views_nft_tokens_min_fields
  stddev: mb_views_nft_tokens_stddev_fields
  stddev_pop: mb_views_nft_tokens_stddev_pop_fields
  stddev_samp: mb_views_nft_tokens_stddev_samp_fields
  sum: mb_views_nft_tokens_sum_fields
  var_pop: mb_views_nft_tokens_var_pop_fields
  var_samp: mb_views_nft_tokens_var_samp_fields
  variance: mb_views_nft_tokens_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_tokens_avg_fields {
  copies: Float
  royalties_percent: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_tokens". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_tokens_bool_exp {
  _and: [mb_views_nft_tokens_bool_exp!]
  _not: mb_views_nft_tokens_bool_exp
  _or: [mb_views_nft_tokens_bool_exp!]
  base_uri: String_comparison_exp
  burned_receipt_id: String_comparison_exp
  burned_timestamp: timestamp_comparison_exp
  copies: bigint_comparison_exp
  description: String_comparison_exp
  expires_at: timestamp_comparison_exp
  extra: String_comparison_exp
  issued_at: timestamp_comparison_exp
  last_transfer_receipt_id: String_comparison_exp
  last_transfer_timestamp: timestamp_comparison_exp
  listings: nft_listings_bool_exp
  listings_aggregate: nft_listings_aggregate_bool_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  metadata_content_flag: String_comparison_exp
  metadata_id: String_comparison_exp
  mint_memo: String_comparison_exp
  minted_receipt_id: String_comparison_exp
  minted_timestamp: timestamp_comparison_exp
  minter: String_comparison_exp
  nft_contract_content_flag: String_comparison_exp
  nft_contract_created_at: timestamp_comparison_exp
  nft_contract_icon: String_comparison_exp
  nft_contract_id: String_comparison_exp
  nft_contract_is_mintbase: Boolean_comparison_exp
  nft_contract_name: String_comparison_exp
  nft_contract_owner_id: String_comparison_exp
  nft_contract_reference: String_comparison_exp
  nft_contract_spec: String_comparison_exp
  nft_contract_symbol: String_comparison_exp
  owner: String_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  reference_hash: String_comparison_exp
  royalties: jsonb_comparison_exp
  royalties_percent: Int_comparison_exp
  splits: jsonb_comparison_exp
  starts_at: timestamp_comparison_exp
  title: String_comparison_exp
  token_id: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_tokens_max_fields {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type mb_views_nft_tokens_min_fields {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""Ordering options when selecting data from "mb_views.nft_tokens"."""
input mb_views_nft_tokens_order_by {
  base_uri: order_by
  burned_receipt_id: order_by
  burned_timestamp: order_by
  copies: order_by
  description: order_by
  expires_at: order_by
  extra: order_by
  issued_at: order_by
  last_transfer_receipt_id: order_by
  last_transfer_timestamp: order_by
  listings_aggregate: nft_listings_aggregate_order_by
  media: order_by
  media_hash: order_by
  metadata_content_flag: order_by
  metadata_id: order_by
  mint_memo: order_by
  minted_receipt_id: order_by
  minted_timestamp: order_by
  minter: order_by
  nft_contract_content_flag: order_by
  nft_contract_created_at: order_by
  nft_contract_icon: order_by
  nft_contract_id: order_by
  nft_contract_is_mintbase: order_by
  nft_contract_name: order_by
  nft_contract_owner_id: order_by
  nft_contract_reference: order_by
  nft_contract_spec: order_by
  nft_contract_symbol: order_by
  owner: order_by
  reference: order_by
  reference_blob: order_by
  reference_hash: order_by
  royalties: order_by
  royalties_percent: order_by
  splits: order_by
  starts_at: order_by
  title: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "mb_views.nft_tokens"
"""
enum mb_views_nft_tokens_select_column {
  """column name"""
  base_uri
  """column name"""
  burned_receipt_id
  """column name"""
  burned_timestamp
  """column name"""
  copies
  """column name"""
  description
  """column name"""
  expires_at
  """column name"""
  extra
  """column name"""
  issued_at
  """column name"""
  last_transfer_receipt_id
  """column name"""
  last_transfer_timestamp
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  metadata_content_flag
  """column name"""
  metadata_id
  """column name"""
  mint_memo
  """column name"""
  minted_receipt_id
  """column name"""
  minted_timestamp
  """column name"""
  minter
  """column name"""
  nft_contract_content_flag
  """column name"""
  nft_contract_created_at
  """column name"""
  nft_contract_icon
  """column name"""
  nft_contract_id
  """column name"""
  nft_contract_is_mintbase
  """column name"""
  nft_contract_name
  """column name"""
  nft_contract_owner_id
  """column name"""
  nft_contract_reference
  """column name"""
  nft_contract_spec
  """column name"""
  nft_contract_symbol
  """column name"""
  owner
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  reference_hash
  """column name"""
  royalties
  """column name"""
  royalties_percent
  """column name"""
  splits
  """column name"""
  starts_at
  """column name"""
  title
  """column name"""
  token_id
  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type mb_views_nft_tokens_stddev_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_tokens_stddev_pop_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_tokens_stddev_samp_fields {
  copies: Float
  royalties_percent: Float
}

"""
Streaming cursor of the table "mb_views_nft_tokens"
"""
input mb_views_nft_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_tokens_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_tokens_stream_cursor_value_input {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_blob: jsonb
  reference_hash: String
  royalties: jsonb
  royalties_percent: Int
  splits: jsonb
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type mb_views_nft_tokens_sum_fields {
  copies: bigint
  royalties_percent: Int
}

"""aggregate var_pop on columns"""
type mb_views_nft_tokens_var_pop_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_tokens_var_samp_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate variance on columns"""
type mb_views_nft_tokens_variance_fields {
  copies: Float
  royalties_percent: Float
}

"""
columns and relationships of "mb_views.nft_tokens_with_listing"
"""
type mb_views_nft_tokens_with_listing {
  content_flag: String
  metadata_id: String
  nft_contract_id: String
  owner: String
  price: numeric
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  token_id: String
}

"""
aggregated selection of "mb_views.nft_tokens_with_listing"
"""
type mb_views_nft_tokens_with_listing_aggregate {
  aggregate: mb_views_nft_tokens_with_listing_aggregate_fields
  nodes: [mb_views_nft_tokens_with_listing!]!
}

"""
aggregate fields of "mb_views.nft_tokens_with_listing"
"""
type mb_views_nft_tokens_with_listing_aggregate_fields {
  avg: mb_views_nft_tokens_with_listing_avg_fields
  count(columns: [mb_views_nft_tokens_with_listing_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_tokens_with_listing_max_fields
  min: mb_views_nft_tokens_with_listing_min_fields
  stddev: mb_views_nft_tokens_with_listing_stddev_fields
  stddev_pop: mb_views_nft_tokens_with_listing_stddev_pop_fields
  stddev_samp: mb_views_nft_tokens_with_listing_stddev_samp_fields
  sum: mb_views_nft_tokens_with_listing_sum_fields
  var_pop: mb_views_nft_tokens_with_listing_var_pop_fields
  var_samp: mb_views_nft_tokens_with_listing_var_samp_fields
  variance: mb_views_nft_tokens_with_listing_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_tokens_with_listing_avg_fields {
  price: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_tokens_with_listing". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_tokens_with_listing_bool_exp {
  _and: [mb_views_nft_tokens_with_listing_bool_exp!]
  _not: mb_views_nft_tokens_with_listing_bool_exp
  _or: [mb_views_nft_tokens_with_listing_bool_exp!]
  content_flag: String_comparison_exp
  metadata_id: String_comparison_exp
  nft_contract_id: String_comparison_exp
  owner: String_comparison_exp
  price: numeric_comparison_exp
  reference_blob: jsonb_comparison_exp
  token_id: String_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_tokens_with_listing_max_fields {
  content_flag: String
  metadata_id: String
  nft_contract_id: String
  owner: String
  price: numeric
  token_id: String
}

"""aggregate min on columns"""
type mb_views_nft_tokens_with_listing_min_fields {
  content_flag: String
  metadata_id: String
  nft_contract_id: String
  owner: String
  price: numeric
  token_id: String
}

"""
Ordering options when selecting data from "mb_views.nft_tokens_with_listing".
"""
input mb_views_nft_tokens_with_listing_order_by {
  content_flag: order_by
  metadata_id: order_by
  nft_contract_id: order_by
  owner: order_by
  price: order_by
  reference_blob: order_by
  token_id: order_by
}

"""
select columns of table "mb_views.nft_tokens_with_listing"
"""
enum mb_views_nft_tokens_with_listing_select_column {
  """column name"""
  content_flag
  """column name"""
  metadata_id
  """column name"""
  nft_contract_id
  """column name"""
  owner
  """column name"""
  price
  """column name"""
  reference_blob
  """column name"""
  token_id
}

"""aggregate stddev on columns"""
type mb_views_nft_tokens_with_listing_stddev_fields {
  price: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_tokens_with_listing_stddev_pop_fields {
  price: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_tokens_with_listing_stddev_samp_fields {
  price: Float
}

"""
Streaming cursor of the table "mb_views_nft_tokens_with_listing"
"""
input mb_views_nft_tokens_with_listing_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_tokens_with_listing_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_tokens_with_listing_stream_cursor_value_input {
  content_flag: String
  metadata_id: String
  nft_contract_id: String
  owner: String
  price: numeric
  reference_blob: jsonb
  token_id: String
}

"""aggregate sum on columns"""
type mb_views_nft_tokens_with_listing_sum_fields {
  price: numeric
}

"""aggregate var_pop on columns"""
type mb_views_nft_tokens_with_listing_var_pop_fields {
  price: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_tokens_with_listing_var_samp_fields {
  price: Float
}

"""aggregate variance on columns"""
type mb_views_nft_tokens_with_listing_variance_fields {
  price: Float
}

"""
columns and relationships of "mb_views.nft_tokens_with_media_type"
"""
type mb_views_nft_tokens_with_media_type {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  forever_media_type: String
  forever_media_url: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  """An array relationship"""
  listings(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """An aggregate relationship"""
  listings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): nft_listings_aggregate!
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  reference_hash: String
  royalties(
    """JSON select path"""
    path: String
  ): jsonb
  royalties_percent: Int
  splits(
    """JSON select path"""
    path: String
  ): jsonb
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""
aggregated selection of "mb_views.nft_tokens_with_media_type"
"""
type mb_views_nft_tokens_with_media_type_aggregate {
  aggregate: mb_views_nft_tokens_with_media_type_aggregate_fields
  nodes: [mb_views_nft_tokens_with_media_type!]!
}

"""
aggregate fields of "mb_views.nft_tokens_with_media_type"
"""
type mb_views_nft_tokens_with_media_type_aggregate_fields {
  avg: mb_views_nft_tokens_with_media_type_avg_fields
  count(columns: [mb_views_nft_tokens_with_media_type_select_column!], distinct: Boolean): Int!
  max: mb_views_nft_tokens_with_media_type_max_fields
  min: mb_views_nft_tokens_with_media_type_min_fields
  stddev: mb_views_nft_tokens_with_media_type_stddev_fields
  stddev_pop: mb_views_nft_tokens_with_media_type_stddev_pop_fields
  stddev_samp: mb_views_nft_tokens_with_media_type_stddev_samp_fields
  sum: mb_views_nft_tokens_with_media_type_sum_fields
  var_pop: mb_views_nft_tokens_with_media_type_var_pop_fields
  var_samp: mb_views_nft_tokens_with_media_type_var_samp_fields
  variance: mb_views_nft_tokens_with_media_type_variance_fields
}

"""aggregate avg on columns"""
type mb_views_nft_tokens_with_media_type_avg_fields {
  copies: Float
  royalties_percent: Float
}

"""
Boolean expression to filter rows from the table "mb_views.nft_tokens_with_media_type". All fields are combined with a logical 'AND'.
"""
input mb_views_nft_tokens_with_media_type_bool_exp {
  _and: [mb_views_nft_tokens_with_media_type_bool_exp!]
  _not: mb_views_nft_tokens_with_media_type_bool_exp
  _or: [mb_views_nft_tokens_with_media_type_bool_exp!]
  base_uri: String_comparison_exp
  burned_receipt_id: String_comparison_exp
  burned_timestamp: timestamp_comparison_exp
  copies: bigint_comparison_exp
  description: String_comparison_exp
  expires_at: timestamp_comparison_exp
  extra: String_comparison_exp
  forever_media_type: String_comparison_exp
  forever_media_url: String_comparison_exp
  issued_at: timestamp_comparison_exp
  last_transfer_receipt_id: String_comparison_exp
  last_transfer_timestamp: timestamp_comparison_exp
  listings: nft_listings_bool_exp
  listings_aggregate: nft_listings_aggregate_bool_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  metadata_content_flag: String_comparison_exp
  metadata_id: String_comparison_exp
  mint_memo: String_comparison_exp
  minted_receipt_id: String_comparison_exp
  minted_timestamp: timestamp_comparison_exp
  minter: String_comparison_exp
  nft_contract_content_flag: String_comparison_exp
  nft_contract_created_at: timestamp_comparison_exp
  nft_contract_icon: String_comparison_exp
  nft_contract_id: String_comparison_exp
  nft_contract_is_mintbase: Boolean_comparison_exp
  nft_contract_name: String_comparison_exp
  nft_contract_owner_id: String_comparison_exp
  nft_contract_reference: String_comparison_exp
  nft_contract_spec: String_comparison_exp
  nft_contract_symbol: String_comparison_exp
  owner: String_comparison_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  reference_hash: String_comparison_exp
  royalties: jsonb_comparison_exp
  royalties_percent: Int_comparison_exp
  splits: jsonb_comparison_exp
  starts_at: timestamp_comparison_exp
  title: String_comparison_exp
  token_id: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type mb_views_nft_tokens_with_media_type_max_fields {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  forever_media_type: String
  forever_media_url: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type mb_views_nft_tokens_with_media_type_min_fields {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  forever_media_type: String
  forever_media_url: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""
Ordering options when selecting data from "mb_views.nft_tokens_with_media_type".
"""
input mb_views_nft_tokens_with_media_type_order_by {
  base_uri: order_by
  burned_receipt_id: order_by
  burned_timestamp: order_by
  copies: order_by
  description: order_by
  expires_at: order_by
  extra: order_by
  forever_media_type: order_by
  forever_media_url: order_by
  issued_at: order_by
  last_transfer_receipt_id: order_by
  last_transfer_timestamp: order_by
  listings_aggregate: nft_listings_aggregate_order_by
  media: order_by
  media_hash: order_by
  metadata_content_flag: order_by
  metadata_id: order_by
  mint_memo: order_by
  minted_receipt_id: order_by
  minted_timestamp: order_by
  minter: order_by
  nft_contract_content_flag: order_by
  nft_contract_created_at: order_by
  nft_contract_icon: order_by
  nft_contract_id: order_by
  nft_contract_is_mintbase: order_by
  nft_contract_name: order_by
  nft_contract_owner_id: order_by
  nft_contract_reference: order_by
  nft_contract_spec: order_by
  nft_contract_symbol: order_by
  owner: order_by
  reference: order_by
  reference_blob: order_by
  reference_hash: order_by
  royalties: order_by
  royalties_percent: order_by
  splits: order_by
  starts_at: order_by
  title: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "mb_views.nft_tokens_with_media_type"
"""
enum mb_views_nft_tokens_with_media_type_select_column {
  """column name"""
  base_uri
  """column name"""
  burned_receipt_id
  """column name"""
  burned_timestamp
  """column name"""
  copies
  """column name"""
  description
  """column name"""
  expires_at
  """column name"""
  extra
  """column name"""
  forever_media_type
  """column name"""
  forever_media_url
  """column name"""
  issued_at
  """column name"""
  last_transfer_receipt_id
  """column name"""
  last_transfer_timestamp
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  metadata_content_flag
  """column name"""
  metadata_id
  """column name"""
  mint_memo
  """column name"""
  minted_receipt_id
  """column name"""
  minted_timestamp
  """column name"""
  minter
  """column name"""
  nft_contract_content_flag
  """column name"""
  nft_contract_created_at
  """column name"""
  nft_contract_icon
  """column name"""
  nft_contract_id
  """column name"""
  nft_contract_is_mintbase
  """column name"""
  nft_contract_name
  """column name"""
  nft_contract_owner_id
  """column name"""
  nft_contract_reference
  """column name"""
  nft_contract_spec
  """column name"""
  nft_contract_symbol
  """column name"""
  owner
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  reference_hash
  """column name"""
  royalties
  """column name"""
  royalties_percent
  """column name"""
  splits
  """column name"""
  starts_at
  """column name"""
  title
  """column name"""
  token_id
  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type mb_views_nft_tokens_with_media_type_stddev_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_nft_tokens_with_media_type_stddev_pop_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_nft_tokens_with_media_type_stddev_samp_fields {
  copies: Float
  royalties_percent: Float
}

"""
Streaming cursor of the table "mb_views_nft_tokens_with_media_type"
"""
input mb_views_nft_tokens_with_media_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_nft_tokens_with_media_type_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_nft_tokens_with_media_type_stream_cursor_value_input {
  base_uri: String
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  description: String
  expires_at: timestamp
  extra: String
  forever_media_type: String
  forever_media_url: String
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  media: String
  media_hash: String
  metadata_content_flag: String
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_content_flag: String
  nft_contract_created_at: timestamp
  nft_contract_icon: String
  nft_contract_id: String
  nft_contract_is_mintbase: Boolean
  nft_contract_name: String
  nft_contract_owner_id: String
  nft_contract_reference: String
  nft_contract_spec: String
  nft_contract_symbol: String
  owner: String
  reference: String
  reference_blob: jsonb
  reference_hash: String
  royalties: jsonb
  royalties_percent: Int
  splits: jsonb
  starts_at: timestamp
  title: String
  token_id: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type mb_views_nft_tokens_with_media_type_sum_fields {
  copies: bigint
  royalties_percent: Int
}

"""aggregate var_pop on columns"""
type mb_views_nft_tokens_with_media_type_var_pop_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate var_samp on columns"""
type mb_views_nft_tokens_with_media_type_var_samp_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate variance on columns"""
type mb_views_nft_tokens_with_media_type_variance_fields {
  copies: Float
  royalties_percent: Float
}

"""
columns and relationships of "mb_views.top_stores"
"""
type mb_views_top_stores {
  date: timestamp
  nft_contract_id: String
  total: numeric
}

"""
aggregated selection of "mb_views.top_stores"
"""
type mb_views_top_stores_aggregate {
  aggregate: mb_views_top_stores_aggregate_fields
  nodes: [mb_views_top_stores!]!
}

"""
aggregate fields of "mb_views.top_stores"
"""
type mb_views_top_stores_aggregate_fields {
  avg: mb_views_top_stores_avg_fields
  count(columns: [mb_views_top_stores_select_column!], distinct: Boolean): Int!
  max: mb_views_top_stores_max_fields
  min: mb_views_top_stores_min_fields
  stddev: mb_views_top_stores_stddev_fields
  stddev_pop: mb_views_top_stores_stddev_pop_fields
  stddev_samp: mb_views_top_stores_stddev_samp_fields
  sum: mb_views_top_stores_sum_fields
  var_pop: mb_views_top_stores_var_pop_fields
  var_samp: mb_views_top_stores_var_samp_fields
  variance: mb_views_top_stores_variance_fields
}

"""aggregate avg on columns"""
type mb_views_top_stores_avg_fields {
  total: Float
}

"""
Boolean expression to filter rows from the table "mb_views.top_stores". All fields are combined with a logical 'AND'.
"""
input mb_views_top_stores_bool_exp {
  _and: [mb_views_top_stores_bool_exp!]
  _not: mb_views_top_stores_bool_exp
  _or: [mb_views_top_stores_bool_exp!]
  date: timestamp_comparison_exp
  nft_contract_id: String_comparison_exp
  total: numeric_comparison_exp
}

"""aggregate max on columns"""
type mb_views_top_stores_max_fields {
  date: timestamp
  nft_contract_id: String
  total: numeric
}

"""aggregate min on columns"""
type mb_views_top_stores_min_fields {
  date: timestamp
  nft_contract_id: String
  total: numeric
}

"""Ordering options when selecting data from "mb_views.top_stores"."""
input mb_views_top_stores_order_by {
  date: order_by
  nft_contract_id: order_by
  total: order_by
}

"""
select columns of table "mb_views.top_stores"
"""
enum mb_views_top_stores_select_column {
  """column name"""
  date
  """column name"""
  nft_contract_id
  """column name"""
  total
}

"""aggregate stddev on columns"""
type mb_views_top_stores_stddev_fields {
  total: Float
}

"""aggregate stddev_pop on columns"""
type mb_views_top_stores_stddev_pop_fields {
  total: Float
}

"""aggregate stddev_samp on columns"""
type mb_views_top_stores_stddev_samp_fields {
  total: Float
}

"""
Streaming cursor of the table "mb_views_top_stores"
"""
input mb_views_top_stores_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mb_views_top_stores_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mb_views_top_stores_stream_cursor_value_input {
  date: timestamp
  nft_contract_id: String
  total: numeric
}

"""aggregate sum on columns"""
type mb_views_top_stores_sum_fields {
  total: numeric
}

"""aggregate var_pop on columns"""
type mb_views_top_stores_var_pop_fields {
  total: Float
}

"""aggregate var_samp on columns"""
type mb_views_top_stores_var_samp_fields {
  total: Float
}

"""aggregate variance on columns"""
type mb_views_top_stores_variance_fields {
  total: Float
}

"""
columns and relationships of "nft_activities"
"""
type nft_activities {
  action_receiver: String
  action_sender: String
  kind: String!
  memo: String
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
  price: numeric
  receipt_id: String!
  timestamp: timestamp!
  token_id: String!
  tx_sender: String!
}

"""
aggregated selection of "nft_activities"
"""
type nft_activities_aggregate {
  aggregate: nft_activities_aggregate_fields
  nodes: [nft_activities!]!
}

"""
aggregate fields of "nft_activities"
"""
type nft_activities_aggregate_fields {
  avg: nft_activities_avg_fields
  count(columns: [nft_activities_select_column!], distinct: Boolean): Int!
  max: nft_activities_max_fields
  min: nft_activities_min_fields
  stddev: nft_activities_stddev_fields
  stddev_pop: nft_activities_stddev_pop_fields
  stddev_samp: nft_activities_stddev_samp_fields
  sum: nft_activities_sum_fields
  var_pop: nft_activities_var_pop_fields
  var_samp: nft_activities_var_samp_fields
  variance: nft_activities_variance_fields
}

"""aggregate avg on columns"""
type nft_activities_avg_fields {
  price: Float
}

"""
Boolean expression to filter rows from the table "nft_activities". All fields are combined with a logical 'AND'.
"""
input nft_activities_bool_exp {
  _and: [nft_activities_bool_exp!]
  _not: nft_activities_bool_exp
  _or: [nft_activities_bool_exp!]
  action_receiver: String_comparison_exp
  action_sender: String_comparison_exp
  kind: String_comparison_exp
  memo: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
  price: numeric_comparison_exp
  receipt_id: String_comparison_exp
  timestamp: timestamp_comparison_exp
  token_id: String_comparison_exp
  tx_sender: String_comparison_exp
}

"""aggregate max on columns"""
type nft_activities_max_fields {
  action_receiver: String
  action_sender: String
  kind: String
  memo: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  timestamp: timestamp
  token_id: String
  tx_sender: String
}

"""aggregate min on columns"""
type nft_activities_min_fields {
  action_receiver: String
  action_sender: String
  kind: String
  memo: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  timestamp: timestamp
  token_id: String
  tx_sender: String
}

"""Ordering options when selecting data from "nft_activities"."""
input nft_activities_order_by {
  action_receiver: order_by
  action_sender: order_by
  kind: order_by
  memo: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
  price: order_by
  receipt_id: order_by
  timestamp: order_by
  token_id: order_by
  tx_sender: order_by
}

"""
select columns of table "nft_activities"
"""
enum nft_activities_select_column {
  """column name"""
  action_receiver
  """column name"""
  action_sender
  """column name"""
  kind
  """column name"""
  memo
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  receipt_id
  """column name"""
  timestamp
  """column name"""
  token_id
  """column name"""
  tx_sender
}

"""aggregate stddev on columns"""
type nft_activities_stddev_fields {
  price: Float
}

"""aggregate stddev_pop on columns"""
type nft_activities_stddev_pop_fields {
  price: Float
}

"""aggregate stddev_samp on columns"""
type nft_activities_stddev_samp_fields {
  price: Float
}

"""
Streaming cursor of the table "nft_activities"
"""
input nft_activities_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_activities_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_activities_stream_cursor_value_input {
  action_receiver: String
  action_sender: String
  kind: String
  memo: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  timestamp: timestamp
  token_id: String
  tx_sender: String
}

"""aggregate sum on columns"""
type nft_activities_sum_fields {
  price: numeric
}

"""aggregate var_pop on columns"""
type nft_activities_var_pop_fields {
  price: Float
}

"""aggregate var_samp on columns"""
type nft_activities_var_samp_fields {
  price: Float
}

"""aggregate variance on columns"""
type nft_activities_variance_fields {
  price: Float
}

"""
columns and relationships of "nft_attributes"
"""
type nft_attributes {
  attribute_display_type: String
  attribute_type: String!
  attribute_value: String
  """An object relationship"""
  metadata: nft_metadata
  nft_contract_id: String!
  nft_metadata_id: String!
}

"""
aggregated selection of "nft_attributes"
"""
type nft_attributes_aggregate {
  aggregate: nft_attributes_aggregate_fields
  nodes: [nft_attributes!]!
}

"""
aggregate fields of "nft_attributes"
"""
type nft_attributes_aggregate_fields {
  count(columns: [nft_attributes_select_column!], distinct: Boolean): Int!
  max: nft_attributes_max_fields
  min: nft_attributes_min_fields
}

"""
Boolean expression to filter rows from the table "nft_attributes". All fields are combined with a logical 'AND'.
"""
input nft_attributes_bool_exp {
  _and: [nft_attributes_bool_exp!]
  _not: nft_attributes_bool_exp
  _or: [nft_attributes_bool_exp!]
  attribute_display_type: String_comparison_exp
  attribute_type: String_comparison_exp
  attribute_value: String_comparison_exp
  metadata: nft_metadata_bool_exp
  nft_contract_id: String_comparison_exp
  nft_metadata_id: String_comparison_exp
}

"""aggregate max on columns"""
type nft_attributes_max_fields {
  attribute_display_type: String
  attribute_type: String
  attribute_value: String
  nft_contract_id: String
  nft_metadata_id: String
}

"""aggregate min on columns"""
type nft_attributes_min_fields {
  attribute_display_type: String
  attribute_type: String
  attribute_value: String
  nft_contract_id: String
  nft_metadata_id: String
}

"""Ordering options when selecting data from "nft_attributes"."""
input nft_attributes_order_by {
  attribute_display_type: order_by
  attribute_type: order_by
  attribute_value: order_by
  metadata: nft_metadata_order_by
  nft_contract_id: order_by
  nft_metadata_id: order_by
}

"""
select columns of table "nft_attributes"
"""
enum nft_attributes_select_column {
  """column name"""
  attribute_display_type
  """column name"""
  attribute_type
  """column name"""
  attribute_value
  """column name"""
  nft_contract_id
  """column name"""
  nft_metadata_id
}

"""
Streaming cursor of the table "nft_attributes"
"""
input nft_attributes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_attributes_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_attributes_stream_cursor_value_input {
  attribute_display_type: String
  attribute_type: String
  attribute_value: String
  nft_contract_id: String
  nft_metadata_id: String
}

"""
columns and relationships of "nft_contracts"
"""
type nft_contracts {
  base_uri: String
  content_flag: String
  created_at: timestamp
  created_receipt_id: String
  icon: String
  id: String!
  is_mintbase: Boolean!
  name: String!
  owner_id: String
  reference: String
  reference_hash: String
  spec: String!
  symbol: String
}

"""
aggregated selection of "nft_contracts"
"""
type nft_contracts_aggregate {
  aggregate: nft_contracts_aggregate_fields
  nodes: [nft_contracts!]!
}

"""
aggregate fields of "nft_contracts"
"""
type nft_contracts_aggregate_fields {
  count(columns: [nft_contracts_select_column!], distinct: Boolean): Int!
  max: nft_contracts_max_fields
  min: nft_contracts_min_fields
}

"""
Boolean expression to filter rows from the table "nft_contracts". All fields are combined with a logical 'AND'.
"""
input nft_contracts_bool_exp {
  _and: [nft_contracts_bool_exp!]
  _not: nft_contracts_bool_exp
  _or: [nft_contracts_bool_exp!]
  base_uri: String_comparison_exp
  content_flag: String_comparison_exp
  created_at: timestamp_comparison_exp
  created_receipt_id: String_comparison_exp
  icon: String_comparison_exp
  id: String_comparison_exp
  is_mintbase: Boolean_comparison_exp
  name: String_comparison_exp
  owner_id: String_comparison_exp
  reference: String_comparison_exp
  reference_hash: String_comparison_exp
  spec: String_comparison_exp
  symbol: String_comparison_exp
}

"""aggregate max on columns"""
type nft_contracts_max_fields {
  base_uri: String
  content_flag: String
  created_at: timestamp
  created_receipt_id: String
  icon: String
  id: String
  name: String
  owner_id: String
  reference: String
  reference_hash: String
  spec: String
  symbol: String
}

"""aggregate min on columns"""
type nft_contracts_min_fields {
  base_uri: String
  content_flag: String
  created_at: timestamp
  created_receipt_id: String
  icon: String
  id: String
  name: String
  owner_id: String
  reference: String
  reference_hash: String
  spec: String
  symbol: String
}

"""Ordering options when selecting data from "nft_contracts"."""
input nft_contracts_order_by {
  base_uri: order_by
  content_flag: order_by
  created_at: order_by
  created_receipt_id: order_by
  icon: order_by
  id: order_by
  is_mintbase: order_by
  name: order_by
  owner_id: order_by
  reference: order_by
  reference_hash: order_by
  spec: order_by
  symbol: order_by
}

"""
select columns of table "nft_contracts"
"""
enum nft_contracts_select_column {
  """column name"""
  base_uri
  """column name"""
  content_flag
  """column name"""
  created_at
  """column name"""
  created_receipt_id
  """column name"""
  icon
  """column name"""
  id
  """column name"""
  is_mintbase
  """column name"""
  name
  """column name"""
  owner_id
  """column name"""
  reference
  """column name"""
  reference_hash
  """column name"""
  spec
  """column name"""
  symbol
}

"""
Streaming cursor of the table "nft_contracts"
"""
input nft_contracts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_contracts_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_contracts_stream_cursor_value_input {
  base_uri: String
  content_flag: String
  created_at: timestamp
  created_receipt_id: String
  icon: String
  id: String
  is_mintbase: Boolean
  name: String
  owner_id: String
  reference: String
  reference_hash: String
  spec: String
  symbol: String
}

"""
columns and relationships of "nft_earnings"
"""
type nft_earnings {
  amount: numeric!
  approval_id: numeric!
  currency: String!
  is_mintbase_cut: Boolean!
  is_referral: Boolean!
  market_id: String!
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
  """An object relationship"""
  nft_token: mb_views_nft_tokens
  """An object relationship"""
  offer: nft_offers
  offer_id: bigint!
  receipt_id: String!
  receiver_id: String!
  timestamp: timestamp!
  token_id: String!
}

"""
aggregated selection of "nft_earnings"
"""
type nft_earnings_aggregate {
  aggregate: nft_earnings_aggregate_fields
  nodes: [nft_earnings!]!
}

"""
aggregate fields of "nft_earnings"
"""
type nft_earnings_aggregate_fields {
  avg: nft_earnings_avg_fields
  count(columns: [nft_earnings_select_column!], distinct: Boolean): Int!
  max: nft_earnings_max_fields
  min: nft_earnings_min_fields
  stddev: nft_earnings_stddev_fields
  stddev_pop: nft_earnings_stddev_pop_fields
  stddev_samp: nft_earnings_stddev_samp_fields
  sum: nft_earnings_sum_fields
  var_pop: nft_earnings_var_pop_fields
  var_samp: nft_earnings_var_samp_fields
  variance: nft_earnings_variance_fields
}

"""aggregate avg on columns"""
type nft_earnings_avg_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""
Boolean expression to filter rows from the table "nft_earnings". All fields are combined with a logical 'AND'.
"""
input nft_earnings_bool_exp {
  _and: [nft_earnings_bool_exp!]
  _not: nft_earnings_bool_exp
  _or: [nft_earnings_bool_exp!]
  amount: numeric_comparison_exp
  approval_id: numeric_comparison_exp
  currency: String_comparison_exp
  is_mintbase_cut: Boolean_comparison_exp
  is_referral: Boolean_comparison_exp
  market_id: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
  nft_token: mb_views_nft_tokens_bool_exp
  offer: nft_offers_bool_exp
  offer_id: bigint_comparison_exp
  receipt_id: String_comparison_exp
  receiver_id: String_comparison_exp
  timestamp: timestamp_comparison_exp
  token_id: String_comparison_exp
}

"""aggregate max on columns"""
type nft_earnings_max_fields {
  amount: numeric
  approval_id: numeric
  currency: String
  market_id: String
  nft_contract_id: String
  offer_id: bigint
  receipt_id: String
  receiver_id: String
  timestamp: timestamp
  token_id: String
}

"""aggregate min on columns"""
type nft_earnings_min_fields {
  amount: numeric
  approval_id: numeric
  currency: String
  market_id: String
  nft_contract_id: String
  offer_id: bigint
  receipt_id: String
  receiver_id: String
  timestamp: timestamp
  token_id: String
}

"""Ordering options when selecting data from "nft_earnings"."""
input nft_earnings_order_by {
  amount: order_by
  approval_id: order_by
  currency: order_by
  is_mintbase_cut: order_by
  is_referral: order_by
  market_id: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
  nft_token: mb_views_nft_tokens_order_by
  offer: nft_offers_order_by
  offer_id: order_by
  receipt_id: order_by
  receiver_id: order_by
  timestamp: order_by
  token_id: order_by
}

"""
select columns of table "nft_earnings"
"""
enum nft_earnings_select_column {
  """column name"""
  amount
  """column name"""
  approval_id
  """column name"""
  currency
  """column name"""
  is_mintbase_cut
  """column name"""
  is_referral
  """column name"""
  market_id
  """column name"""
  nft_contract_id
  """column name"""
  offer_id
  """column name"""
  receipt_id
  """column name"""
  receiver_id
  """column name"""
  timestamp
  """column name"""
  token_id
}

"""aggregate stddev on columns"""
type nft_earnings_stddev_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""aggregate stddev_pop on columns"""
type nft_earnings_stddev_pop_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""aggregate stddev_samp on columns"""
type nft_earnings_stddev_samp_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""
Streaming cursor of the table "nft_earnings"
"""
input nft_earnings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_earnings_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_earnings_stream_cursor_value_input {
  amount: numeric
  approval_id: numeric
  currency: String
  is_mintbase_cut: Boolean
  is_referral: Boolean
  market_id: String
  nft_contract_id: String
  offer_id: bigint
  receipt_id: String
  receiver_id: String
  timestamp: timestamp
  token_id: String
}

"""aggregate sum on columns"""
type nft_earnings_sum_fields {
  amount: numeric
  approval_id: numeric
  offer_id: bigint
}

"""aggregate var_pop on columns"""
type nft_earnings_var_pop_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""aggregate var_samp on columns"""
type nft_earnings_var_samp_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""aggregate variance on columns"""
type nft_earnings_variance_fields {
  amount: Float
  approval_id: Float
  offer_id: Float
}

"""
columns and relationships of "nft_listings"
"""
type nft_listings {
  accepted_at: timestamp
  accepted_offer_id: bigint
  approval_id: numeric!
  created_at: timestamp!
  currency: String!
  invalidated_at: timestamp
  kind: String!
  listed_by: String!
  market_id: String!
  metadata_id: String
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
  """An object relationship"""
  nft_token: mb_views_nft_tokens
  """An array relationship"""
  offers(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): [nft_offers!]!
  """An aggregate relationship"""
  offers_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): nft_offers_aggregate!
  price: numeric
  receipt_id: String!
  """An object relationship"""
  token: mb_views_nft_tokens
  token_id: String!
  unlisted_at: timestamp
}

"""
aggregated selection of "nft_listings"
"""
type nft_listings_aggregate {
  aggregate: nft_listings_aggregate_fields
  nodes: [nft_listings!]!
}

input nft_listings_aggregate_bool_exp {
  count: nft_listings_aggregate_bool_exp_count
}

input nft_listings_aggregate_bool_exp_count {
  arguments: [nft_listings_select_column!]
  distinct: Boolean
  filter: nft_listings_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "nft_listings"
"""
type nft_listings_aggregate_fields {
  avg: nft_listings_avg_fields
  count(columns: [nft_listings_select_column!], distinct: Boolean): Int!
  max: nft_listings_max_fields
  min: nft_listings_min_fields
  stddev: nft_listings_stddev_fields
  stddev_pop: nft_listings_stddev_pop_fields
  stddev_samp: nft_listings_stddev_samp_fields
  sum: nft_listings_sum_fields
  var_pop: nft_listings_var_pop_fields
  var_samp: nft_listings_var_samp_fields
  variance: nft_listings_variance_fields
}

"""
order by aggregate values of table "nft_listings"
"""
input nft_listings_aggregate_order_by {
  avg: nft_listings_avg_order_by
  count: order_by
  max: nft_listings_max_order_by
  min: nft_listings_min_order_by
  stddev: nft_listings_stddev_order_by
  stddev_pop: nft_listings_stddev_pop_order_by
  stddev_samp: nft_listings_stddev_samp_order_by
  sum: nft_listings_sum_order_by
  var_pop: nft_listings_var_pop_order_by
  var_samp: nft_listings_var_samp_order_by
  variance: nft_listings_variance_order_by
}

"""aggregate avg on columns"""
type nft_listings_avg_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by avg() on columns of table "nft_listings"
"""
input nft_listings_avg_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "nft_listings". All fields are combined with a logical 'AND'.
"""
input nft_listings_bool_exp {
  _and: [nft_listings_bool_exp!]
  _not: nft_listings_bool_exp
  _or: [nft_listings_bool_exp!]
  accepted_at: timestamp_comparison_exp
  accepted_offer_id: bigint_comparison_exp
  approval_id: numeric_comparison_exp
  created_at: timestamp_comparison_exp
  currency: String_comparison_exp
  invalidated_at: timestamp_comparison_exp
  kind: String_comparison_exp
  listed_by: String_comparison_exp
  market_id: String_comparison_exp
  metadata_id: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
  nft_token: mb_views_nft_tokens_bool_exp
  offers: nft_offers_bool_exp
  offers_aggregate: nft_offers_aggregate_bool_exp
  price: numeric_comparison_exp
  receipt_id: String_comparison_exp
  token: mb_views_nft_tokens_bool_exp
  token_id: String_comparison_exp
  unlisted_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type nft_listings_max_fields {
  accepted_at: timestamp
  accepted_offer_id: bigint
  approval_id: numeric
  created_at: timestamp
  currency: String
  invalidated_at: timestamp
  kind: String
  listed_by: String
  market_id: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  token_id: String
  unlisted_at: timestamp
}

"""
order by max() on columns of table "nft_listings"
"""
input nft_listings_max_order_by {
  accepted_at: order_by
  accepted_offer_id: order_by
  approval_id: order_by
  created_at: order_by
  currency: order_by
  invalidated_at: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  metadata_id: order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  token_id: order_by
  unlisted_at: order_by
}

"""aggregate min on columns"""
type nft_listings_min_fields {
  accepted_at: timestamp
  accepted_offer_id: bigint
  approval_id: numeric
  created_at: timestamp
  currency: String
  invalidated_at: timestamp
  kind: String
  listed_by: String
  market_id: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  token_id: String
  unlisted_at: timestamp
}

"""
order by min() on columns of table "nft_listings"
"""
input nft_listings_min_order_by {
  accepted_at: order_by
  accepted_offer_id: order_by
  approval_id: order_by
  created_at: order_by
  currency: order_by
  invalidated_at: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  metadata_id: order_by
  nft_contract_id: order_by
  price: order_by
  receipt_id: order_by
  token_id: order_by
  unlisted_at: order_by
}

"""Ordering options when selecting data from "nft_listings"."""
input nft_listings_order_by {
  accepted_at: order_by
  accepted_offer_id: order_by
  approval_id: order_by
  created_at: order_by
  currency: order_by
  invalidated_at: order_by
  kind: order_by
  listed_by: order_by
  market_id: order_by
  metadata_id: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
  nft_token: mb_views_nft_tokens_order_by
  offers_aggregate: nft_offers_aggregate_order_by
  price: order_by
  receipt_id: order_by
  token: mb_views_nft_tokens_order_by
  token_id: order_by
  unlisted_at: order_by
}

"""
select columns of table "nft_listings"
"""
enum nft_listings_select_column {
  """column name"""
  accepted_at
  """column name"""
  accepted_offer_id
  """column name"""
  approval_id
  """column name"""
  created_at
  """column name"""
  currency
  """column name"""
  invalidated_at
  """column name"""
  kind
  """column name"""
  listed_by
  """column name"""
  market_id
  """column name"""
  metadata_id
  """column name"""
  nft_contract_id
  """column name"""
  price
  """column name"""
  receipt_id
  """column name"""
  token_id
  """column name"""
  unlisted_at
}

"""aggregate stddev on columns"""
type nft_listings_stddev_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by stddev() on columns of table "nft_listings"
"""
input nft_listings_stddev_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""aggregate stddev_pop on columns"""
type nft_listings_stddev_pop_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by stddev_pop() on columns of table "nft_listings"
"""
input nft_listings_stddev_pop_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""aggregate stddev_samp on columns"""
type nft_listings_stddev_samp_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by stddev_samp() on columns of table "nft_listings"
"""
input nft_listings_stddev_samp_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""
Streaming cursor of the table "nft_listings"
"""
input nft_listings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_listings_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_listings_stream_cursor_value_input {
  accepted_at: timestamp
  accepted_offer_id: bigint
  approval_id: numeric
  created_at: timestamp
  currency: String
  invalidated_at: timestamp
  kind: String
  listed_by: String
  market_id: String
  metadata_id: String
  nft_contract_id: String
  price: numeric
  receipt_id: String
  token_id: String
  unlisted_at: timestamp
}

"""aggregate sum on columns"""
type nft_listings_sum_fields {
  accepted_offer_id: bigint
  approval_id: numeric
  price: numeric
}

"""
order by sum() on columns of table "nft_listings"
"""
input nft_listings_sum_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""aggregate var_pop on columns"""
type nft_listings_var_pop_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by var_pop() on columns of table "nft_listings"
"""
input nft_listings_var_pop_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""aggregate var_samp on columns"""
type nft_listings_var_samp_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by var_samp() on columns of table "nft_listings"
"""
input nft_listings_var_samp_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""aggregate variance on columns"""
type nft_listings_variance_fields {
  accepted_offer_id: Float
  approval_id: Float
  price: Float
}

"""
order by variance() on columns of table "nft_listings"
"""
input nft_listings_variance_order_by {
  accepted_offer_id: order_by
  approval_id: order_by
  price: order_by
}

"""
columns and relationships of "nft_metadata"
"""
type nft_metadata {
  base_uri: String
  content_flag: String
  description: String
  extra: String
  id: String!
  media: String
  media_hash: String
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
  reference: String
  reference_blob(
    """JSON select path"""
    path: String
  ): jsonb
  title: String
}

"""
aggregated selection of "nft_metadata"
"""
type nft_metadata_aggregate {
  aggregate: nft_metadata_aggregate_fields
  nodes: [nft_metadata!]!
}

"""
aggregate fields of "nft_metadata"
"""
type nft_metadata_aggregate_fields {
  count(columns: [nft_metadata_select_column!], distinct: Boolean): Int!
  max: nft_metadata_max_fields
  min: nft_metadata_min_fields
}

"""
Boolean expression to filter rows from the table "nft_metadata". All fields are combined with a logical 'AND'.
"""
input nft_metadata_bool_exp {
  _and: [nft_metadata_bool_exp!]
  _not: nft_metadata_bool_exp
  _or: [nft_metadata_bool_exp!]
  base_uri: String_comparison_exp
  content_flag: String_comparison_exp
  description: String_comparison_exp
  extra: String_comparison_exp
  id: String_comparison_exp
  media: String_comparison_exp
  media_hash: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
  reference: String_comparison_exp
  reference_blob: jsonb_comparison_exp
  title: String_comparison_exp
}

"""aggregate max on columns"""
type nft_metadata_max_fields {
  base_uri: String
  content_flag: String
  description: String
  extra: String
  id: String
  media: String
  media_hash: String
  nft_contract_id: String
  reference: String
  title: String
}

"""aggregate min on columns"""
type nft_metadata_min_fields {
  base_uri: String
  content_flag: String
  description: String
  extra: String
  id: String
  media: String
  media_hash: String
  nft_contract_id: String
  reference: String
  title: String
}

"""Ordering options when selecting data from "nft_metadata"."""
input nft_metadata_order_by {
  base_uri: order_by
  content_flag: order_by
  description: order_by
  extra: order_by
  id: order_by
  media: order_by
  media_hash: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
  reference: order_by
  reference_blob: order_by
  title: order_by
}

"""
select columns of table "nft_metadata"
"""
enum nft_metadata_select_column {
  """column name"""
  base_uri
  """column name"""
  content_flag
  """column name"""
  description
  """column name"""
  extra
  """column name"""
  id
  """column name"""
  media
  """column name"""
  media_hash
  """column name"""
  nft_contract_id
  """column name"""
  reference
  """column name"""
  reference_blob
  """column name"""
  title
}

"""
Streaming cursor of the table "nft_metadata"
"""
input nft_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_metadata_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_metadata_stream_cursor_value_input {
  base_uri: String
  content_flag: String
  description: String
  extra: String
  id: String
  media: String
  media_hash: String
  nft_contract_id: String
  reference: String
  reference_blob: jsonb
  title: String
}

"""
columns and relationships of "nft_offers"
"""
type nft_offers {
  accepted_at: timestamp
  approval_id: numeric!
  currency: String!
  expires_at: timestamp
  invalidated_at: timestamp
  """An object relationship"""
  listing: nft_listings
  market_id: String!
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
  """An object relationship"""
  nft_token: mb_views_nft_tokens
  offer_id: bigint!
  offer_price: numeric!
  offered_at: timestamp!
  offered_by: String!
  outbid_at: timestamp
  receipt_id: String!
  referral_amount: numeric
  referrer_id: String
  """An object relationship"""
  token: nft_tokens
  token_id: String!
  withdrawn_at: timestamp
}

"""
aggregated selection of "nft_offers"
"""
type nft_offers_aggregate {
  aggregate: nft_offers_aggregate_fields
  nodes: [nft_offers!]!
}

input nft_offers_aggregate_bool_exp {
  count: nft_offers_aggregate_bool_exp_count
}

input nft_offers_aggregate_bool_exp_count {
  arguments: [nft_offers_select_column!]
  distinct: Boolean
  filter: nft_offers_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "nft_offers"
"""
type nft_offers_aggregate_fields {
  avg: nft_offers_avg_fields
  count(columns: [nft_offers_select_column!], distinct: Boolean): Int!
  max: nft_offers_max_fields
  min: nft_offers_min_fields
  stddev: nft_offers_stddev_fields
  stddev_pop: nft_offers_stddev_pop_fields
  stddev_samp: nft_offers_stddev_samp_fields
  sum: nft_offers_sum_fields
  var_pop: nft_offers_var_pop_fields
  var_samp: nft_offers_var_samp_fields
  variance: nft_offers_variance_fields
}

"""
order by aggregate values of table "nft_offers"
"""
input nft_offers_aggregate_order_by {
  avg: nft_offers_avg_order_by
  count: order_by
  max: nft_offers_max_order_by
  min: nft_offers_min_order_by
  stddev: nft_offers_stddev_order_by
  stddev_pop: nft_offers_stddev_pop_order_by
  stddev_samp: nft_offers_stddev_samp_order_by
  sum: nft_offers_sum_order_by
  var_pop: nft_offers_var_pop_order_by
  var_samp: nft_offers_var_samp_order_by
  variance: nft_offers_variance_order_by
}

"""aggregate avg on columns"""
type nft_offers_avg_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by avg() on columns of table "nft_offers"
"""
input nft_offers_avg_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""
Boolean expression to filter rows from the table "nft_offers". All fields are combined with a logical 'AND'.
"""
input nft_offers_bool_exp {
  _and: [nft_offers_bool_exp!]
  _not: nft_offers_bool_exp
  _or: [nft_offers_bool_exp!]
  accepted_at: timestamp_comparison_exp
  approval_id: numeric_comparison_exp
  currency: String_comparison_exp
  expires_at: timestamp_comparison_exp
  invalidated_at: timestamp_comparison_exp
  listing: nft_listings_bool_exp
  market_id: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
  nft_token: mb_views_nft_tokens_bool_exp
  offer_id: bigint_comparison_exp
  offer_price: numeric_comparison_exp
  offered_at: timestamp_comparison_exp
  offered_by: String_comparison_exp
  outbid_at: timestamp_comparison_exp
  receipt_id: String_comparison_exp
  referral_amount: numeric_comparison_exp
  referrer_id: String_comparison_exp
  token: nft_tokens_bool_exp
  token_id: String_comparison_exp
  withdrawn_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type nft_offers_max_fields {
  accepted_at: timestamp
  approval_id: numeric
  currency: String
  expires_at: timestamp
  invalidated_at: timestamp
  market_id: String
  nft_contract_id: String
  offer_id: bigint
  offer_price: numeric
  offered_at: timestamp
  offered_by: String
  outbid_at: timestamp
  receipt_id: String
  referral_amount: numeric
  referrer_id: String
  token_id: String
  withdrawn_at: timestamp
}

"""
order by max() on columns of table "nft_offers"
"""
input nft_offers_max_order_by {
  accepted_at: order_by
  approval_id: order_by
  currency: order_by
  expires_at: order_by
  invalidated_at: order_by
  market_id: order_by
  nft_contract_id: order_by
  offer_id: order_by
  offer_price: order_by
  offered_at: order_by
  offered_by: order_by
  outbid_at: order_by
  receipt_id: order_by
  referral_amount: order_by
  referrer_id: order_by
  token_id: order_by
  withdrawn_at: order_by
}

"""aggregate min on columns"""
type nft_offers_min_fields {
  accepted_at: timestamp
  approval_id: numeric
  currency: String
  expires_at: timestamp
  invalidated_at: timestamp
  market_id: String
  nft_contract_id: String
  offer_id: bigint
  offer_price: numeric
  offered_at: timestamp
  offered_by: String
  outbid_at: timestamp
  receipt_id: String
  referral_amount: numeric
  referrer_id: String
  token_id: String
  withdrawn_at: timestamp
}

"""
order by min() on columns of table "nft_offers"
"""
input nft_offers_min_order_by {
  accepted_at: order_by
  approval_id: order_by
  currency: order_by
  expires_at: order_by
  invalidated_at: order_by
  market_id: order_by
  nft_contract_id: order_by
  offer_id: order_by
  offer_price: order_by
  offered_at: order_by
  offered_by: order_by
  outbid_at: order_by
  receipt_id: order_by
  referral_amount: order_by
  referrer_id: order_by
  token_id: order_by
  withdrawn_at: order_by
}

"""Ordering options when selecting data from "nft_offers"."""
input nft_offers_order_by {
  accepted_at: order_by
  approval_id: order_by
  currency: order_by
  expires_at: order_by
  invalidated_at: order_by
  listing: nft_listings_order_by
  market_id: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
  nft_token: mb_views_nft_tokens_order_by
  offer_id: order_by
  offer_price: order_by
  offered_at: order_by
  offered_by: order_by
  outbid_at: order_by
  receipt_id: order_by
  referral_amount: order_by
  referrer_id: order_by
  token: nft_tokens_order_by
  token_id: order_by
  withdrawn_at: order_by
}

"""
select columns of table "nft_offers"
"""
enum nft_offers_select_column {
  """column name"""
  accepted_at
  """column name"""
  approval_id
  """column name"""
  currency
  """column name"""
  expires_at
  """column name"""
  invalidated_at
  """column name"""
  market_id
  """column name"""
  nft_contract_id
  """column name"""
  offer_id
  """column name"""
  offer_price
  """column name"""
  offered_at
  """column name"""
  offered_by
  """column name"""
  outbid_at
  """column name"""
  receipt_id
  """column name"""
  referral_amount
  """column name"""
  referrer_id
  """column name"""
  token_id
  """column name"""
  withdrawn_at
}

"""aggregate stddev on columns"""
type nft_offers_stddev_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by stddev() on columns of table "nft_offers"
"""
input nft_offers_stddev_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""aggregate stddev_pop on columns"""
type nft_offers_stddev_pop_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by stddev_pop() on columns of table "nft_offers"
"""
input nft_offers_stddev_pop_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""aggregate stddev_samp on columns"""
type nft_offers_stddev_samp_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by stddev_samp() on columns of table "nft_offers"
"""
input nft_offers_stddev_samp_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""
Streaming cursor of the table "nft_offers"
"""
input nft_offers_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_offers_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_offers_stream_cursor_value_input {
  accepted_at: timestamp
  approval_id: numeric
  currency: String
  expires_at: timestamp
  invalidated_at: timestamp
  market_id: String
  nft_contract_id: String
  offer_id: bigint
  offer_price: numeric
  offered_at: timestamp
  offered_by: String
  outbid_at: timestamp
  receipt_id: String
  referral_amount: numeric
  referrer_id: String
  token_id: String
  withdrawn_at: timestamp
}

"""aggregate sum on columns"""
type nft_offers_sum_fields {
  approval_id: numeric
  offer_id: bigint
  offer_price: numeric
  referral_amount: numeric
}

"""
order by sum() on columns of table "nft_offers"
"""
input nft_offers_sum_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""aggregate var_pop on columns"""
type nft_offers_var_pop_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by var_pop() on columns of table "nft_offers"
"""
input nft_offers_var_pop_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""aggregate var_samp on columns"""
type nft_offers_var_samp_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by var_samp() on columns of table "nft_offers"
"""
input nft_offers_var_samp_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""aggregate variance on columns"""
type nft_offers_variance_fields {
  approval_id: Float
  offer_id: Float
  offer_price: Float
  referral_amount: Float
}

"""
order by variance() on columns of table "nft_offers"
"""
input nft_offers_variance_order_by {
  approval_id: order_by
  offer_id: order_by
  offer_price: order_by
  referral_amount: order_by
}

"""
columns and relationships of "nft_tokens"
"""
type nft_tokens {
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  expires_at: timestamp
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  """An object relationship"""
  nft_contract: nft_contracts
  nft_contract_id: String!
  """An object relationship"""
  nft_contracts: nft_contracts
  """An array relationship"""
  nft_listings(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """An aggregate relationship"""
  nft_listings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): nft_listings_aggregate!
  owner: String!
  reference: String
  reference_hash: String
  royalties(
    """JSON select path"""
    path: String
  ): jsonb
  royalties_percent: Int
  splits(
    """JSON select path"""
    path: String
  ): jsonb
  starts_at: timestamp
  token_id: String!
  updated_at: timestamp
}

"""
aggregated selection of "nft_tokens"
"""
type nft_tokens_aggregate {
  aggregate: nft_tokens_aggregate_fields
  nodes: [nft_tokens!]!
}

"""
aggregate fields of "nft_tokens"
"""
type nft_tokens_aggregate_fields {
  avg: nft_tokens_avg_fields
  count(columns: [nft_tokens_select_column!], distinct: Boolean): Int!
  max: nft_tokens_max_fields
  min: nft_tokens_min_fields
  stddev: nft_tokens_stddev_fields
  stddev_pop: nft_tokens_stddev_pop_fields
  stddev_samp: nft_tokens_stddev_samp_fields
  sum: nft_tokens_sum_fields
  var_pop: nft_tokens_var_pop_fields
  var_samp: nft_tokens_var_samp_fields
  variance: nft_tokens_variance_fields
}

"""aggregate avg on columns"""
type nft_tokens_avg_fields {
  copies: Float
  royalties_percent: Float
}

"""
Boolean expression to filter rows from the table "nft_tokens". All fields are combined with a logical 'AND'.
"""
input nft_tokens_bool_exp {
  _and: [nft_tokens_bool_exp!]
  _not: nft_tokens_bool_exp
  _or: [nft_tokens_bool_exp!]
  burned_receipt_id: String_comparison_exp
  burned_timestamp: timestamp_comparison_exp
  copies: bigint_comparison_exp
  expires_at: timestamp_comparison_exp
  issued_at: timestamp_comparison_exp
  last_transfer_receipt_id: String_comparison_exp
  last_transfer_timestamp: timestamp_comparison_exp
  metadata_id: String_comparison_exp
  mint_memo: String_comparison_exp
  minted_receipt_id: String_comparison_exp
  minted_timestamp: timestamp_comparison_exp
  minter: String_comparison_exp
  nft_contract: nft_contracts_bool_exp
  nft_contract_id: String_comparison_exp
  nft_contracts: nft_contracts_bool_exp
  nft_listings: nft_listings_bool_exp
  nft_listings_aggregate: nft_listings_aggregate_bool_exp
  owner: String_comparison_exp
  reference: String_comparison_exp
  reference_hash: String_comparison_exp
  royalties: jsonb_comparison_exp
  royalties_percent: Int_comparison_exp
  splits: jsonb_comparison_exp
  starts_at: timestamp_comparison_exp
  token_id: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""aggregate max on columns"""
type nft_tokens_max_fields {
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  expires_at: timestamp
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  owner: String
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  token_id: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type nft_tokens_min_fields {
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  expires_at: timestamp
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  owner: String
  reference: String
  reference_hash: String
  royalties_percent: Int
  starts_at: timestamp
  token_id: String
  updated_at: timestamp
}

"""Ordering options when selecting data from "nft_tokens"."""
input nft_tokens_order_by {
  burned_receipt_id: order_by
  burned_timestamp: order_by
  copies: order_by
  expires_at: order_by
  issued_at: order_by
  last_transfer_receipt_id: order_by
  last_transfer_timestamp: order_by
  metadata_id: order_by
  mint_memo: order_by
  minted_receipt_id: order_by
  minted_timestamp: order_by
  minter: order_by
  nft_contract: nft_contracts_order_by
  nft_contract_id: order_by
  nft_contracts: nft_contracts_order_by
  nft_listings_aggregate: nft_listings_aggregate_order_by
  owner: order_by
  reference: order_by
  reference_hash: order_by
  royalties: order_by
  royalties_percent: order_by
  splits: order_by
  starts_at: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "nft_tokens"
"""
enum nft_tokens_select_column {
  """column name"""
  burned_receipt_id
  """column name"""
  burned_timestamp
  """column name"""
  copies
  """column name"""
  expires_at
  """column name"""
  issued_at
  """column name"""
  last_transfer_receipt_id
  """column name"""
  last_transfer_timestamp
  """column name"""
  metadata_id
  """column name"""
  mint_memo
  """column name"""
  minted_receipt_id
  """column name"""
  minted_timestamp
  """column name"""
  minter
  """column name"""
  nft_contract_id
  """column name"""
  owner
  """column name"""
  reference
  """column name"""
  reference_hash
  """column name"""
  royalties
  """column name"""
  royalties_percent
  """column name"""
  splits
  """column name"""
  starts_at
  """column name"""
  token_id
  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type nft_tokens_stddev_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate stddev_pop on columns"""
type nft_tokens_stddev_pop_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate stddev_samp on columns"""
type nft_tokens_stddev_samp_fields {
  copies: Float
  royalties_percent: Float
}

"""
Streaming cursor of the table "nft_tokens"
"""
input nft_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nft_tokens_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nft_tokens_stream_cursor_value_input {
  burned_receipt_id: String
  burned_timestamp: timestamp
  copies: bigint
  expires_at: timestamp
  issued_at: timestamp
  last_transfer_receipt_id: String
  last_transfer_timestamp: timestamp
  metadata_id: String
  mint_memo: String
  minted_receipt_id: String
  minted_timestamp: timestamp
  minter: String
  nft_contract_id: String
  owner: String
  reference: String
  reference_hash: String
  royalties: jsonb
  royalties_percent: Int
  splits: jsonb
  starts_at: timestamp
  token_id: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type nft_tokens_sum_fields {
  copies: bigint
  royalties_percent: Int
}

"""aggregate var_pop on columns"""
type nft_tokens_var_pop_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate var_samp on columns"""
type nft_tokens_var_samp_fields {
  copies: Float
  royalties_percent: Float
}

"""aggregate variance on columns"""
type nft_tokens_variance_fields {
  copies: Float
  royalties_percent: Float
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "blocks"
  """
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]
    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!
  """
  fetch aggregated fields from the table: "blocks"
  """
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]
    """filter the rows returned"""
    where: blocks_bool_exp
  ): blocks_aggregate!
  """fetch data from the table: "blocks" using primary key columns"""
  blocks_by_pk(synced_height: bigint!): blocks
  """
  fetch data from the table: "mb_store_minters"
  """
  mb_store_minters(
    """distinct select on columns"""
    distinct_on: [mb_store_minters_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_store_minters_order_by!]
    """filter the rows returned"""
    where: mb_store_minters_bool_exp
  ): [Minter!]!
  """
  fetch aggregated fields from the table: "mb_store_minters"
  """
  mb_store_minters_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_store_minters_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_store_minters_order_by!]
    """filter the rows returned"""
    where: mb_store_minters_bool_exp
  ): mb_store_minters_aggregate!
  """
  fetch data from the table: "mb_store_minters" using primary key columns
  """
  mb_store_minters_by_pk(minter_id: String!, nft_contract_id: String!): Minter
  """
  fetch data from the table: "mb_views.active_listings"
  """
  mb_views_active_listings(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): [Listing!]!
  """
  fetch aggregated fields from the table: "mb_views.active_listings"
  """
  mb_views_active_listings_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): mb_views_active_listings_aggregate!
  """
  fetch data from the table: "mb_views.active_listings_rollup"
  """
  mb_views_active_listings_rollup(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_rollup_bool_exp
  ): [mb_views_active_listings_rollup!]!
  """
  fetch aggregated fields from the table: "mb_views.active_listings_rollup"
  """
  mb_views_active_listings_rollup_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_rollup_bool_exp
  ): mb_views_active_listings_rollup_aggregate!
  """
  fetch data from the table: "mb_views.auctions_with_offer"
  """
  mb_views_auctions_with_offer(
    """distinct select on columns"""
    distinct_on: [mb_views_auctions_with_offer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_auctions_with_offer_order_by!]
    """filter the rows returned"""
    where: mb_views_auctions_with_offer_bool_exp
  ): [mb_views_auctions_with_offer!]!
  """
  fetch aggregated fields from the table: "mb_views.auctions_with_offer"
  """
  mb_views_auctions_with_offer_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_auctions_with_offer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_auctions_with_offer_order_by!]
    """filter the rows returned"""
    where: mb_views_auctions_with_offer_bool_exp
  ): mb_views_auctions_with_offer_aggregate!
  """
  fetch data from the table: "mb_views.nft_activities"
  """
  mb_views_nft_activities(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_bool_exp
  ): [mb_views_nft_activities!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_activities"
  """
  mb_views_nft_activities_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_bool_exp
  ): mb_views_nft_activities_aggregate!
  """
  fetch data from the table: "mb_views.nft_activities_rollup"
  """
  mb_views_nft_activities_rollup(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_rollup_bool_exp
  ): [mb_views_nft_activities_rollup!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_activities_rollup"
  """
  mb_views_nft_activities_rollup_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_rollup_bool_exp
  ): mb_views_nft_activities_rollup_aggregate!
  """
  fetch data from the table: "mb_views.nft_metadata"
  """
  mb_views_nft_metadata(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_bool_exp
  ): [mb_views_nft_metadata!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_metadata"
  """
  mb_views_nft_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_bool_exp
  ): mb_views_nft_metadata_aggregate!
  """
  fetch data from the table: "mb_views.nft_metadata_unburned"
  """
  mb_views_nft_metadata_unburned(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_unburned_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_unburned_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_unburned_bool_exp
  ): [mb_views_nft_metadata_unburned!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_metadata_unburned"
  """
  mb_views_nft_metadata_unburned_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_unburned_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_unburned_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_unburned_bool_exp
  ): mb_views_nft_metadata_unburned_aggregate!
  """
  fetch data from the table: "mb_views.nft_owned_tokens"
  """
  mb_views_nft_owned_tokens(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_owned_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_owned_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_owned_tokens_bool_exp
  ): [mb_views_nft_owned_tokens!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_owned_tokens"
  """
  mb_views_nft_owned_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_owned_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_owned_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_owned_tokens_bool_exp
  ): mb_views_nft_owned_tokens_aggregate!
  """
  fetch data from the table: "mb_views.nft_tokens"
  """
  mb_views_nft_tokens(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_bool_exp
  ): [mb_views_nft_tokens!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_tokens"
  """
  mb_views_nft_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_bool_exp
  ): mb_views_nft_tokens_aggregate!
  """
  fetch data from the table: "mb_views.nft_tokens_with_listing"
  """
  mb_views_nft_tokens_with_listing(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_listing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_listing_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_listing_bool_exp
  ): [mb_views_nft_tokens_with_listing!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_tokens_with_listing"
  """
  mb_views_nft_tokens_with_listing_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_listing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_listing_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_listing_bool_exp
  ): mb_views_nft_tokens_with_listing_aggregate!
  """
  fetch data from the table: "mb_views.nft_tokens_with_media_type"
  """
  mb_views_nft_tokens_with_media_type(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_media_type_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_media_type_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_media_type_bool_exp
  ): [mb_views_nft_tokens_with_media_type!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_tokens_with_media_type"
  """
  mb_views_nft_tokens_with_media_type_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_media_type_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_media_type_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_media_type_bool_exp
  ): mb_views_nft_tokens_with_media_type_aggregate!
  """
  fetch data from the table: "mb_views.top_stores"
  """
  mb_views_top_stores(
    """distinct select on columns"""
    distinct_on: [mb_views_top_stores_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_top_stores_order_by!]
    """filter the rows returned"""
    where: mb_views_top_stores_bool_exp
  ): [mb_views_top_stores!]!
  """
  fetch aggregated fields from the table: "mb_views.top_stores"
  """
  mb_views_top_stores_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_top_stores_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_top_stores_order_by!]
    """filter the rows returned"""
    where: mb_views_top_stores_bool_exp
  ): mb_views_top_stores_aggregate!
  """
  fetch data from the table: "nft_activities"
  """
  nft_activities(
    """distinct select on columns"""
    distinct_on: [nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_activities_order_by!]
    """filter the rows returned"""
    where: nft_activities_bool_exp
  ): [nft_activities!]!
  """
  fetch aggregated fields from the table: "nft_activities"
  """
  nft_activities_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_activities_order_by!]
    """filter the rows returned"""
    where: nft_activities_bool_exp
  ): nft_activities_aggregate!
  """fetch data from the table: "nft_activities" using primary key columns"""
  nft_activities_by_pk(kind: String!, nft_contract_id: String!, receipt_id: String!, token_id: String!): nft_activities
  """
  fetch data from the table: "nft_attributes"
  """
  nft_attributes(
    """distinct select on columns"""
    distinct_on: [nft_attributes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_attributes_order_by!]
    """filter the rows returned"""
    where: nft_attributes_bool_exp
  ): [nft_attributes!]!
  """
  fetch aggregated fields from the table: "nft_attributes"
  """
  nft_attributes_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_attributes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_attributes_order_by!]
    """filter the rows returned"""
    where: nft_attributes_bool_exp
  ): nft_attributes_aggregate!
  """fetch data from the table: "nft_attributes" using primary key columns"""
  nft_attributes_by_pk(attribute_type: String!, nft_contract_id: String!, nft_metadata_id: String!): nft_attributes
  """
  fetch data from the table: "nft_contracts"
  """
  nft_contracts(
    """distinct select on columns"""
    distinct_on: [nft_contracts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_contracts_order_by!]
    """filter the rows returned"""
    where: nft_contracts_bool_exp
  ): [nft_contracts!]!
  """
  fetch aggregated fields from the table: "nft_contracts"
  """
  nft_contracts_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_contracts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_contracts_order_by!]
    """filter the rows returned"""
    where: nft_contracts_bool_exp
  ): nft_contracts_aggregate!
  """fetch data from the table: "nft_contracts" using primary key columns"""
  nft_contracts_by_pk(id: String!): nft_contracts
  """
  fetch data from the table: "nft_earnings"
  """
  nft_earnings(
    """distinct select on columns"""
    distinct_on: [nft_earnings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_earnings_order_by!]
    """filter the rows returned"""
    where: nft_earnings_bool_exp
  ): [nft_earnings!]!
  """
  fetch aggregated fields from the table: "nft_earnings"
  """
  nft_earnings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_earnings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_earnings_order_by!]
    """filter the rows returned"""
    where: nft_earnings_bool_exp
  ): nft_earnings_aggregate!
  """fetch data from the table: "nft_earnings" using primary key columns"""
  nft_earnings_by_pk(approval_id: numeric!, is_mintbase_cut: Boolean!, is_referral: Boolean!, market_id: String!, nft_contract_id: String!, receiver_id: String!, token_id: String!): nft_earnings
  """An array relationship"""
  nft_listings(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """An aggregate relationship"""
  nft_listings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): nft_listings_aggregate!
  """fetch data from the table: "nft_listings" using primary key columns"""
  nft_listings_by_pk(approval_id: numeric!, market_id: String!, nft_contract_id: String!, token_id: String!): nft_listings
  """
  fetch data from the table: "nft_metadata"
  """
  nft_metadata(
    """distinct select on columns"""
    distinct_on: [nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_metadata_order_by!]
    """filter the rows returned"""
    where: nft_metadata_bool_exp
  ): [nft_metadata!]!
  """
  fetch aggregated fields from the table: "nft_metadata"
  """
  nft_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_metadata_order_by!]
    """filter the rows returned"""
    where: nft_metadata_bool_exp
  ): nft_metadata_aggregate!
  """fetch data from the table: "nft_metadata" using primary key columns"""
  nft_metadata_by_pk(id: String!): nft_metadata
  """
  fetch data from the table: "nft_offers"
  """
  nft_offers(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): [nft_offers!]!
  """
  fetch aggregated fields from the table: "nft_offers"
  """
  nft_offers_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): nft_offers_aggregate!
  """fetch data from the table: "nft_offers" using primary key columns"""
  nft_offers_by_pk(approval_id: numeric!, market_id: String!, nft_contract_id: String!, offer_id: bigint!, token_id: String!): nft_offers
  """
  fetch data from the table: "nft_tokens"
  """
  nft_tokens(
    """distinct select on columns"""
    distinct_on: [nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_tokens_order_by!]
    """filter the rows returned"""
    where: nft_tokens_bool_exp
  ): [nft_tokens!]!
  """
  fetch aggregated fields from the table: "nft_tokens"
  """
  nft_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_tokens_order_by!]
    """filter the rows returned"""
    where: nft_tokens_bool_exp
  ): nft_tokens_aggregate!
  """fetch data from the table: "nft_tokens" using primary key columns"""
  nft_tokens_by_pk(nft_contract_id: String!, token_id: String!): nft_tokens
}

type subscription_root {
  """
  fetch data from the table: "blocks"
  """
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]
    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!
  """
  fetch aggregated fields from the table: "blocks"
  """
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]
    """filter the rows returned"""
    where: blocks_bool_exp
  ): blocks_aggregate!
  """fetch data from the table: "blocks" using primary key columns"""
  blocks_by_pk(synced_height: bigint!): blocks
  """
  fetch data from the table in a streaming manner: "blocks"
  """
  blocks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [blocks_stream_cursor_input]!
    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!
  """
  fetch data from the table: "mb_store_minters"
  """
  mb_store_minters(
    """distinct select on columns"""
    distinct_on: [mb_store_minters_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_store_minters_order_by!]
    """filter the rows returned"""
    where: mb_store_minters_bool_exp
  ): [Minter!]!
  """
  fetch aggregated fields from the table: "mb_store_minters"
  """
  mb_store_minters_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_store_minters_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_store_minters_order_by!]
    """filter the rows returned"""
    where: mb_store_minters_bool_exp
  ): mb_store_minters_aggregate!
  """
  fetch data from the table: "mb_store_minters" using primary key columns
  """
  mb_store_minters_by_pk(minter_id: String!, nft_contract_id: String!): Minter
  """
  fetch data from the table in a streaming manner: "mb_store_minters"
  """
  mb_store_minters_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_store_minters_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_store_minters_bool_exp
  ): [Minter!]!
  """
  fetch data from the table: "mb_views.active_listings"
  """
  mb_views_active_listings(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): [Listing!]!
  """
  fetch aggregated fields from the table: "mb_views.active_listings"
  """
  mb_views_active_listings_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): mb_views_active_listings_aggregate!
  """
  fetch data from the table: "mb_views.active_listings_rollup"
  """
  mb_views_active_listings_rollup(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_rollup_bool_exp
  ): [mb_views_active_listings_rollup!]!
  """
  fetch aggregated fields from the table: "mb_views.active_listings_rollup"
  """
  mb_views_active_listings_rollup_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_active_listings_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_active_listings_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_active_listings_rollup_bool_exp
  ): mb_views_active_listings_rollup_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.active_listings_rollup"
  """
  mb_views_active_listings_rollup_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_active_listings_rollup_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_active_listings_rollup_bool_exp
  ): [mb_views_active_listings_rollup!]!
  """
  fetch data from the table in a streaming manner: "mb_views.active_listings"
  """
  mb_views_active_listings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_active_listings_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_active_listings_bool_exp
  ): [Listing!]!
  """
  fetch data from the table: "mb_views.auctions_with_offer"
  """
  mb_views_auctions_with_offer(
    """distinct select on columns"""
    distinct_on: [mb_views_auctions_with_offer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_auctions_with_offer_order_by!]
    """filter the rows returned"""
    where: mb_views_auctions_with_offer_bool_exp
  ): [mb_views_auctions_with_offer!]!
  """
  fetch aggregated fields from the table: "mb_views.auctions_with_offer"
  """
  mb_views_auctions_with_offer_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_auctions_with_offer_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_auctions_with_offer_order_by!]
    """filter the rows returned"""
    where: mb_views_auctions_with_offer_bool_exp
  ): mb_views_auctions_with_offer_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.auctions_with_offer"
  """
  mb_views_auctions_with_offer_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_auctions_with_offer_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_auctions_with_offer_bool_exp
  ): [mb_views_auctions_with_offer!]!
  """
  fetch data from the table: "mb_views.nft_activities"
  """
  mb_views_nft_activities(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_bool_exp
  ): [mb_views_nft_activities!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_activities"
  """
  mb_views_nft_activities_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_bool_exp
  ): mb_views_nft_activities_aggregate!
  """
  fetch data from the table: "mb_views.nft_activities_rollup"
  """
  mb_views_nft_activities_rollup(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_rollup_bool_exp
  ): [mb_views_nft_activities_rollup!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_activities_rollup"
  """
  mb_views_nft_activities_rollup_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_activities_rollup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_activities_rollup_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_activities_rollup_bool_exp
  ): mb_views_nft_activities_rollup_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_activities_rollup"
  """
  mb_views_nft_activities_rollup_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_activities_rollup_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_activities_rollup_bool_exp
  ): [mb_views_nft_activities_rollup!]!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_activities"
  """
  mb_views_nft_activities_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_activities_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_activities_bool_exp
  ): [mb_views_nft_activities!]!
  """
  fetch data from the table: "mb_views.nft_metadata"
  """
  mb_views_nft_metadata(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_bool_exp
  ): [mb_views_nft_metadata!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_metadata"
  """
  mb_views_nft_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_bool_exp
  ): mb_views_nft_metadata_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_metadata"
  """
  mb_views_nft_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_metadata_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_metadata_bool_exp
  ): [mb_views_nft_metadata!]!
  """
  fetch data from the table: "mb_views.nft_metadata_unburned"
  """
  mb_views_nft_metadata_unburned(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_unburned_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_unburned_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_unburned_bool_exp
  ): [mb_views_nft_metadata_unburned!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_metadata_unburned"
  """
  mb_views_nft_metadata_unburned_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_metadata_unburned_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_metadata_unburned_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_metadata_unburned_bool_exp
  ): mb_views_nft_metadata_unburned_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_metadata_unburned"
  """
  mb_views_nft_metadata_unburned_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_metadata_unburned_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_metadata_unburned_bool_exp
  ): [mb_views_nft_metadata_unburned!]!
  """
  fetch data from the table: "mb_views.nft_owned_tokens"
  """
  mb_views_nft_owned_tokens(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_owned_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_owned_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_owned_tokens_bool_exp
  ): [mb_views_nft_owned_tokens!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_owned_tokens"
  """
  mb_views_nft_owned_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_owned_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_owned_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_owned_tokens_bool_exp
  ): mb_views_nft_owned_tokens_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_owned_tokens"
  """
  mb_views_nft_owned_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_owned_tokens_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_owned_tokens_bool_exp
  ): [mb_views_nft_owned_tokens!]!
  """
  fetch data from the table: "mb_views.nft_tokens"
  """
  mb_views_nft_tokens(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_bool_exp
  ): [mb_views_nft_tokens!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_tokens"
  """
  mb_views_nft_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_bool_exp
  ): mb_views_nft_tokens_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_tokens"
  """
  mb_views_nft_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_tokens_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_tokens_bool_exp
  ): [mb_views_nft_tokens!]!
  """
  fetch data from the table: "mb_views.nft_tokens_with_listing"
  """
  mb_views_nft_tokens_with_listing(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_listing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_listing_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_listing_bool_exp
  ): [mb_views_nft_tokens_with_listing!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_tokens_with_listing"
  """
  mb_views_nft_tokens_with_listing_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_listing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_listing_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_listing_bool_exp
  ): mb_views_nft_tokens_with_listing_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_tokens_with_listing"
  """
  mb_views_nft_tokens_with_listing_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_tokens_with_listing_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_listing_bool_exp
  ): [mb_views_nft_tokens_with_listing!]!
  """
  fetch data from the table: "mb_views.nft_tokens_with_media_type"
  """
  mb_views_nft_tokens_with_media_type(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_media_type_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_media_type_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_media_type_bool_exp
  ): [mb_views_nft_tokens_with_media_type!]!
  """
  fetch aggregated fields from the table: "mb_views.nft_tokens_with_media_type"
  """
  mb_views_nft_tokens_with_media_type_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_nft_tokens_with_media_type_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_nft_tokens_with_media_type_order_by!]
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_media_type_bool_exp
  ): mb_views_nft_tokens_with_media_type_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.nft_tokens_with_media_type"
  """
  mb_views_nft_tokens_with_media_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_nft_tokens_with_media_type_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_nft_tokens_with_media_type_bool_exp
  ): [mb_views_nft_tokens_with_media_type!]!
  """
  fetch data from the table: "mb_views.top_stores"
  """
  mb_views_top_stores(
    """distinct select on columns"""
    distinct_on: [mb_views_top_stores_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_top_stores_order_by!]
    """filter the rows returned"""
    where: mb_views_top_stores_bool_exp
  ): [mb_views_top_stores!]!
  """
  fetch aggregated fields from the table: "mb_views.top_stores"
  """
  mb_views_top_stores_aggregate(
    """distinct select on columns"""
    distinct_on: [mb_views_top_stores_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [mb_views_top_stores_order_by!]
    """filter the rows returned"""
    where: mb_views_top_stores_bool_exp
  ): mb_views_top_stores_aggregate!
  """
  fetch data from the table in a streaming manner: "mb_views.top_stores"
  """
  mb_views_top_stores_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [mb_views_top_stores_stream_cursor_input]!
    """filter the rows returned"""
    where: mb_views_top_stores_bool_exp
  ): [mb_views_top_stores!]!
  """
  fetch data from the table: "nft_activities"
  """
  nft_activities(
    """distinct select on columns"""
    distinct_on: [nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_activities_order_by!]
    """filter the rows returned"""
    where: nft_activities_bool_exp
  ): [nft_activities!]!
  """
  fetch aggregated fields from the table: "nft_activities"
  """
  nft_activities_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_activities_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_activities_order_by!]
    """filter the rows returned"""
    where: nft_activities_bool_exp
  ): nft_activities_aggregate!
  """fetch data from the table: "nft_activities" using primary key columns"""
  nft_activities_by_pk(kind: String!, nft_contract_id: String!, receipt_id: String!, token_id: String!): nft_activities
  """
  fetch data from the table in a streaming manner: "nft_activities"
  """
  nft_activities_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_activities_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_activities_bool_exp
  ): [nft_activities!]!
  """
  fetch data from the table: "nft_attributes"
  """
  nft_attributes(
    """distinct select on columns"""
    distinct_on: [nft_attributes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_attributes_order_by!]
    """filter the rows returned"""
    where: nft_attributes_bool_exp
  ): [nft_attributes!]!
  """
  fetch aggregated fields from the table: "nft_attributes"
  """
  nft_attributes_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_attributes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_attributes_order_by!]
    """filter the rows returned"""
    where: nft_attributes_bool_exp
  ): nft_attributes_aggregate!
  """fetch data from the table: "nft_attributes" using primary key columns"""
  nft_attributes_by_pk(attribute_type: String!, nft_contract_id: String!, nft_metadata_id: String!): nft_attributes
  """
  fetch data from the table in a streaming manner: "nft_attributes"
  """
  nft_attributes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_attributes_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_attributes_bool_exp
  ): [nft_attributes!]!
  """
  fetch data from the table: "nft_contracts"
  """
  nft_contracts(
    """distinct select on columns"""
    distinct_on: [nft_contracts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_contracts_order_by!]
    """filter the rows returned"""
    where: nft_contracts_bool_exp
  ): [nft_contracts!]!
  """
  fetch aggregated fields from the table: "nft_contracts"
  """
  nft_contracts_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_contracts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_contracts_order_by!]
    """filter the rows returned"""
    where: nft_contracts_bool_exp
  ): nft_contracts_aggregate!
  """fetch data from the table: "nft_contracts" using primary key columns"""
  nft_contracts_by_pk(id: String!): nft_contracts
  """
  fetch data from the table in a streaming manner: "nft_contracts"
  """
  nft_contracts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_contracts_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_contracts_bool_exp
  ): [nft_contracts!]!
  """
  fetch data from the table: "nft_earnings"
  """
  nft_earnings(
    """distinct select on columns"""
    distinct_on: [nft_earnings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_earnings_order_by!]
    """filter the rows returned"""
    where: nft_earnings_bool_exp
  ): [nft_earnings!]!
  """
  fetch aggregated fields from the table: "nft_earnings"
  """
  nft_earnings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_earnings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_earnings_order_by!]
    """filter the rows returned"""
    where: nft_earnings_bool_exp
  ): nft_earnings_aggregate!
  """fetch data from the table: "nft_earnings" using primary key columns"""
  nft_earnings_by_pk(approval_id: numeric!, is_mintbase_cut: Boolean!, is_referral: Boolean!, market_id: String!, nft_contract_id: String!, receiver_id: String!, token_id: String!): nft_earnings
  """
  fetch data from the table in a streaming manner: "nft_earnings"
  """
  nft_earnings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_earnings_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_earnings_bool_exp
  ): [nft_earnings!]!
  """An array relationship"""
  nft_listings(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """An aggregate relationship"""
  nft_listings_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_listings_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_listings_order_by!]
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): nft_listings_aggregate!
  """fetch data from the table: "nft_listings" using primary key columns"""
  nft_listings_by_pk(approval_id: numeric!, market_id: String!, nft_contract_id: String!, token_id: String!): nft_listings
  """
  fetch data from the table in a streaming manner: "nft_listings"
  """
  nft_listings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_listings_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_listings_bool_exp
  ): [nft_listings!]!
  """
  fetch data from the table: "nft_metadata"
  """
  nft_metadata(
    """distinct select on columns"""
    distinct_on: [nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_metadata_order_by!]
    """filter the rows returned"""
    where: nft_metadata_bool_exp
  ): [nft_metadata!]!
  """
  fetch aggregated fields from the table: "nft_metadata"
  """
  nft_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_metadata_order_by!]
    """filter the rows returned"""
    where: nft_metadata_bool_exp
  ): nft_metadata_aggregate!
  """fetch data from the table: "nft_metadata" using primary key columns"""
  nft_metadata_by_pk(id: String!): nft_metadata
  """
  fetch data from the table in a streaming manner: "nft_metadata"
  """
  nft_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_metadata_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_metadata_bool_exp
  ): [nft_metadata!]!
  """
  fetch data from the table: "nft_offers"
  """
  nft_offers(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): [nft_offers!]!
  """
  fetch aggregated fields from the table: "nft_offers"
  """
  nft_offers_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_offers_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_offers_order_by!]
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): nft_offers_aggregate!
  """fetch data from the table: "nft_offers" using primary key columns"""
  nft_offers_by_pk(approval_id: numeric!, market_id: String!, nft_contract_id: String!, offer_id: bigint!, token_id: String!): nft_offers
  """
  fetch data from the table in a streaming manner: "nft_offers"
  """
  nft_offers_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_offers_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_offers_bool_exp
  ): [nft_offers!]!
  """
  fetch data from the table: "nft_tokens"
  """
  nft_tokens(
    """distinct select on columns"""
    distinct_on: [nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_tokens_order_by!]
    """filter the rows returned"""
    where: nft_tokens_bool_exp
  ): [nft_tokens!]!
  """
  fetch aggregated fields from the table: "nft_tokens"
  """
  nft_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [nft_tokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [nft_tokens_order_by!]
    """filter the rows returned"""
    where: nft_tokens_bool_exp
  ): nft_tokens_aggregate!
  """fetch data from the table: "nft_tokens" using primary key columns"""
  nft_tokens_by_pk(nft_contract_id: String!, token_id: String!): nft_tokens
  """
  fetch data from the table in a streaming manner: "nft_tokens"
  """
  nft_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [nft_tokens_stream_cursor_input]!
    """filter the rows returned"""
    where: nft_tokens_bool_exp
  ): [nft_tokens!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}