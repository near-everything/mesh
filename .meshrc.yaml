sources:
  - name: Things
    handler:
      graphql:
        endpoint: https://everything.fibery.io/api/graphql/space/Things
        operationHeaders:
          Authorization: Bearer {env.FIBERY_TOKEN}
        schemaHeaders:
          Authorization: Bearer {env.FIBERY_TOKEN}

serve:
  browser: false # don't open browser on mesh start
  cors: 
    origin: ["https://alpha.near.org", "https://temp.everything.dev"]
    allowedHeaders: ["Content-Type", "X-Everything"]
    credentials: true # lol somebody educate me, is this secure?
    maxAge: 86400 # should we be generating a CSRF token client side then verifying against server key?
    preflightContinue: false
    optionsSuccessStatus: 204

plugins:
  - csrfPrevention:
      requestHeaders: ['X-Everything'] # default
#   - name: everything
#     handler:
#       graphql:
#         endpoint: '{env.EVERYTHING_URL}'
#     transforms:
#       - hoist-field:
#           - typeName: Query
#             pathConfig:
#               - things
#               - nodes
#             newFieldName: things
#           - typeName: Thing
#             pathConfig:
#               - tags              
#               - nodes
#             newFieldName: tags
#   - name: Mintbase
#     handler:
#       graphql:
#         endpoint: "https://interop-testnet.hasura.app/v1/graphql"
#     transforms:
#       - rename:
#           renames:
#             - from:
#                 type: mb_views_active_listings
#               to:
#                 type: Listing
#             - from:
#                 type: mb_store_minters
#               to:
#                 type: Minter

# additionalTypeDefs: |
#   """
#   Describes the authentication object as provided by Auth0.
#   """
#   type AuthenticationInfo {
#     """
#     String that uniquely identifies an authenticated user.
#     """
#     sub: String!
#   }

#   extend type Query {
#     """
#     The authentication information of the request.
#     """
#     authInfo: AuthenticationInfo
#     listings: [Listing]
#     activeListingsByLister(listerId: String!): [Listing]
#     minter(minterId: String!): Minter
#   }

#   extend type Thing {
#     nft: mb_views_nft_tokens
#   }

#   extend type Listing {
#     thing: Thing
#   }

# additionalResolvers:
#   - ./additionalResolvers.ts
# plugins:
#   - auth0:
#       domain: 'dev-nhpdvemm.us.auth0.com'
#       audience: 'https://dev-nhpdvemm.us.auth0.com/api/v2/'
#       extendContextField: '_auth0'
#       preventUnauthorizedAccess: false
